00:
01: Digital Signal Processing, Voice Sampling & Analysis
Instructions: Your task revolves around the creation of a voice sampling module. Start by writing a Python script that can process all of the character's voice files located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. Your code should be able to:

1. Open and read the audio files in the provided folder.
2. Break down each audio file into smaller segments and assign a phonetic transcription to each segment using an existing library (like CMU Sphinx).
3. Analyze and store the pitch, inflection, and speed of the sample speech for each phonetic segment.
4. Output the results of your analysis in a structured text or binary file (such as CSV, JSON, or Pickle) for easy retrieval and use by 02.

02: Text to Speech Synthesis
Instructions: Your role involves creating a text to speech module that can synthesize speech in the character's voice. Write a Python script that:

1. Takes input text from the user.
2. Breaks down the user text into phonetic segments using a library such as CMU Sphinx or NLTK.
3. Matches each phonetic segment from the user's text to the closest matching segment in 01's analysis file.
4. Pieces together the appropriate voice samples to create a full speech snippet in the character's voice and style.
5. Outputs the resulting synthesized speech to an audio file, maintaining the correct timing, pitch, and inflection as much as possible.

Please note that without a specific AI or Machine Learning model tasked to learn the nuances of the character's voice, results may vary and may not completely mimic the character's voice.
01 Overseer:
To-do:
1. Write a Python script to open and read audio files in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09 - Not started
2. Break down each audio file into smaller segments and transcribe them using an existing library like CMU Sphinx - Not started
3. Analyze and store the pitch, inflection, and speed of the sample speech for each phonetic segment - Not started
4. Output the results of analysis in a structured text or binary file - Not started

Current instruction for you:
To begin with, please write a Python script that opens and reads the audio files in the provided directory (C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09). Make sure that your script is capable of reading these audio files and ensure file path compatibility. You can use libraries such as os, glob and soundfile for this task.
01:
Fetch: None
Message: I will write the requested Python script to access and read audio files from the specified directory. I will use os, glob, and soundfile libraries for the task.

File name: read_audio_files.py
Code: 
```python
import os
import glob
import soundfile as sf

def read_audio_files(directory):
    # os.path.join provided for file path compatibility
    directory_path = os.path.join(directory, '*.wav') 

    audio_files = glob.glob(directory_path)

    for audio_file in audio_files:
        data, samplerate = sf.read(audio_file)
        # Do something with data and samplerate

# Define the directory path
directory = "C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09"

# Call the function
read_audio_files(directory)
```
01 Overseer:
To-do:
1. Write a Python script to open and read audio files in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09 - Completed
2. Break down each audio file into smaller segments and transcribe them using an existing library like CMU Sphinx - Not started
3. Analyze and store the pitch, inflection, and speed of the sample speech for each phonetic segment - Not started
4. Output the results of analysis to a structured text or binary file - Not started

Current instruction for you:
Moving on to the next task, I'd like you to amend the above code to break down each audio file into smaller segments and then transcribe these segments using an existing library such as CMU Sphinx. For simplicity, you can start with breaking down the audio into 5 second segments. Please use the pocketsphinx library for the task of transcription. 
scribe:
******
File name: read_audio_files.py
Content: This Python script (~read_audio_files.py) reads audio files from a specific directory, which is "C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09". The script uses libraries such as os, glob, and soundfile to open and read the audio files. A function 'read_audio_files' is defined that reads all the .wav files in the provided directory and for each file, the data and the sample rate is extracted.
******
01:
Fetch: extract_phonetic_data.py
Message: The given Python script will be extended to include functionalities to break down each audio file into smaller segments and transcribe those using the PocketSphinx library.
File name: extract_and_transcribe_audio.py
Code: 
```python
import os
import librosa
import numpy as np
from pocketsphinx import AudioFile, get_model_path
from exceptions import FileOpeningError, SoundProcessingError

def extract_phonetic_data(file_path):
    # Check if file exists.
    if not os.path.exists(file_path):
        raise FileOpeningError(file_path)
        
    # Load sound file
    try:
        y, sr = librosa.load(file_path, sr=None)
    except Exception as e:
        raise SoundProcessingError(str(e))

    frame_size = 5 * sr
    overlap = 0.5 * frame_size
    frames = librosa.util.frame(y, frame_length=int(frame_size), hop_length=int(overlap)).T
    model_path = get_model_path()

    # Transcribe each frame using CMU Sphinx
    transcriptions = []
    for frame in frames:
        decoder = AudioFile(audio_file=frame, lm=False, keyphrase='hello', kws_threshold=1e-20, model_path=model_path)
        result = decoder.hyp().hypstr
        transcriptions.append(result)

    # Return the transcriptions
    return transcriptions
```
