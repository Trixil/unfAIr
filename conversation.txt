00: 01: Sample Extraction and Pre-processing Module
Instructions: 
1. Access the specified directory: C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09.
2. Enumerate all audio files within this directory, recording their filenames and metadata for further processing.
3. For each audio file, apply an automatic speech recognition algorithm to transcribe the spoken text. Save the transcription paired with the filename.
4. Extract the raw audio data from the sound files, preprocess this data as necessary for the text to speech library to interpret it.
5. Save the preprocessed audio data and transcriptions in an easily readable format, such as .csv, for later use by the text to speech algorithm.

02: Text to Speech Synthesis and Character Modeling
Instructions: 
1. Use the preprocessed data provided by 01 to build a character voice model. This task involves using machine learning libraries to analyze the audio data and establish patterns in speech, intonation, cadence, etc.
2. Implement the character voice model into a text to speech synthesis algorithm. Test the algorithm to ensure that it adequately reproduces the character's voice from the samples.
3. Write a functional interface for users to input text that they wish to convert to speech. Ensure that the user interface is intuitive and easy to use.
4. Integrate the text to speech algorithm and the user interface so that the text input by the user is articulated in the character's voice as closely as possible.
5. Create clear and concise documentation detailing the functionality of the program and instructions for its use.
6. Package the software into an executable file for ease of distribution and installation.
01 Overseer: To-do:
1. Access the specified directory: C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09 - Status: Not started
2. Enumerate all audio files within this directory, recording their filenames and metadata for further processing - Status: Not started
3. For each audio file, apply an automatic speech recognition algorithm to transcribe the spoken text. Save the transcription paired with the filename - Status: Not started
4. Extract the raw audio data from the sound files, preprocess this data as necessary for the text to speech library to interpret it - Status: Not started
5. Save the preprocessed audio data and transcriptions in an easily readable format, such as .csv, for later use by the text to speech algorithm - Status: Not started

Current instruction for you:
Start by implementing the code to access the specified directory: C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09.
01: Fetch: None
File name: access_directory_script.py
Code:
```python
import os

# Function to access a specific directory
def access_directory(directory_path):
    try:
        os.chdir(directory_path)
        print(f"Directory {directory_path} accessed successfully")
    except FileNotFoundError:
        print("The directory does not exist")

# Test accessing the specific directory
access_directory("C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09")
```
01 Overseer: Current instruction for you:
Inspect and run the provided code to verify that it successfully accesses the specified directory. Please return any output the code provides for further inspection. If the access is successful, update the first task's status to "Completed". 

To-do:
1. Access the specified directory: C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09 - Status: In Progress
2. Enumerate all audio files within this directory, recording their filenames and metadata for further processing - Status: Not started
3. For each audio file, apply an automatic speech recognition algorithm to transcribe the spoken text. Save the transcription paired with the filename - Status: Not started
4. Extract the raw audio data from the sound files, preprocess this data as necessary for the text to speech library to interpret it - Status: Not started
5. Save the preprocessed audio data and transcriptions in an easily readable format, such as .csv, for later use by the text to speech algorithm - Status: Not started
scribe: ******
File name: access_directory_script.py
Content: ~access_directory_script.py, ~Your_Directory_Path/access_directory_script.py - This script is written in python and includes a function `access_directory` that attempts to change the current working directory to a specified directory path. If the directory does not exist, it outputs a message indicating that the directory does not exist. It includes a test accessing a specific directory.
******
01: Fetch: None
File name: access_directory.py
Code:
```python
import os

directory_path = "C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09"

def access_directory(directory_path):
    try:
        os.listdir(directory_path) 
        print("Directory accessed successfully.")
        task_status = "Completed"
    except Exception as e:
        print("Could not access the directory. Error - ", str(e))
        task_status = "In Progress"

access_directory(directory_path)
```
01 Overseer: To-do:
1. Access the specified directory: C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09 - Completed
2. Enumerate all audio files within this directory, recording their filenames and metadata for further processing - Not Started
3. For each audio file, apply an automatic speech recognition algorithm to transcribe the spoken text. Save the transcription paired with the filename - Not Started
4. Extract the raw audio data from the sound files, preprocess this data as necessary for the text to speech library to interpret it - Not Started
5. Save the preprocessed audio data and transcriptions in an easily readable format, such as .csv, for later use by the text to speech algorithm - Not Started

Current instruction for you:
Please create an enumerate_audio_files.py script that will list all audio files in the directory, capturing their file names and metadata.

Note: The script should be built to handle typical audio file extensions (such as .mp3, .wav, .flac) and needs to use the os and mutagen libraries (for metadata retrieval).

```python
import os
import mutagen

directory_path = "C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09"

def enumerate_audio_files(directory_path):
    audio_files_data = { "filenames": [], "metadata": [] } # To store filenames and metadata of audio files

    for filename in os.listdir(directory_path):
        if filename.endswith((".mp3", ".wav", ".flac")):
            audio_files_data["filenames"].append(filename)

            file_path = os.path.join(directory_path, filename)
            file_metadata = mutagen.File(file_path, easy=True)

            audio_files_data["metadata"].append(dict(file_metadata))

    return audio_files_data

enumerate_audio_files(directory_path)
```
scribe: ******
File name: access_directory.py
Content: This python script is located at ~access_directory.py. It is used to access and list the contents of a specified directory (in this case, "C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09"). It confirms the successful access by printing "Directory accessed successfully", and if any exception occurs, it prints the relevant error message.
******
01: Fetch: None
File name: enumerate_audio_files.py
Code:
```python
import os
import mutagen

directory_path = "C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09"

def enumerate_audio_files(directory_path):
    audio_files_data = { "filenames": [], "metadata": [] } # To store filenames and metadata of audio files

    for filename in os.listdir(directory_path):
        if filename.endswith((".mp3", ".wav", ".flac")):
            audio_files_data["filenames"].append(filename)

            file_path = os.path.join(directory_path, filename)
            file_metadata = mutagen.File(file_path, easy=True)

            audio_files_data["metadata"].append(dict(file_metadata))

    return audio_files_data

enumerate_audio_files(directory_path)
```
01 Overseer: Current instruction for you:
Please confirm if the above script fetches the names and the metadata of all the audio files present in the target directory. Make sure that the script outputs the data in the defined format: {filenames: [file1, file2,...], metadata:[metadata1, metadata2,...]} where the file names and its corresponding metadata are located at the same index in their respective lists. 

If the script works as expected, create a new Python function named 'transcribe_audio_files'. This function should loop through every audio file in the directory and transcribe their content using an automatic speech recognition algorithm, such as Google Speech Recognition. Use the filenames and metadata fetched previously.

To-do:
1. Access the specified directory: C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09 - Completed
2. Enumerate all audio files within this directory, recording their filenames and metadata for further processing - In Progress 
3. For each audio file, apply an automatic speech recognition algorithm to transcribe the spoken text. Save the transcription paired with the filename - Not Started
4. Extract the raw audio data from the sound files, preprocess this data as necessary for the text to speech library to interpret it - Not Started
5. Save the preprocessed audio data and transcriptions in an easily readable format, such as .csv, for later use by the text to speech algorithm - Not Started
scribe: ******
File name: enumerate_audio_files.py
Content: ~enumerate_audio_files.py, ~"C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09"/enumerate_audio_files.py

This script enumerates through a specified directory path to find audio files (mp3, wav, flac formats). It stores and returns the filenames and metadata of these audio files.
******
01: Fetch: audio_files_handler.py
File name: transcript_handler.py
Code:
```python
import os
import speech_recognition as sr
from pydub import AudioSegment

def transcribe_audio_files(audio_files):
    recognizer = sr.Recognizer()
    transcriptions = []
    for audio_file in audio_files:
        audio_data = AudioSegment.from_wav(audio_file)
        audio_data.export("temp.wav", format="wav")
        with sr.AudioFile("temp.wav") as source:
            audio = recognizer.record(source)
            try:
                transcription = recognizer.recognize_google(audio)
                transcriptions.append((audio_file, transcription))
            except sr.UnknownValueError:
                transcriptions.append((audio_file, "Google Speech Recognition could not understand audio"))
            except sr.RequestError as e:
                transcriptions.append((audio_file, "Could not request results from Google Speech Recognition service; {0}".format(e)))
    os.remove("temp.wav")
    return transcriptions
```
In this script, we assume that the input 'audio_files' are the list of filenames obtained from previous instructions. This script will iterate through each audio file, convert the audio file to a temporary .wav file ('temp.wav') that is compatible with the Google's Speech Recognition, transcribe the audio, append the filename and its corresponding transcription to the 'transcriptions' list, and then repeat the process for the next audio file. After all audio files have been transcribed, 'temp.wav' is removed, and a list of tuples is returned where the first element of the tuple is the filename and the second element is the transcription.

This code does not handle the preprocessing of audio data or the saving of transcriptions and filenames to a .csv file. Note that this code also does not handle errors that might arise if an audio file is unable to be opened or exported. You would need to implement these portions of the software objectives yourself or through another team member.
