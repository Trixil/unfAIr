01:
To-do:
1. Write a Python script to open and read audio files in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09 - Not started
2. Break down each audio file into smaller segments and transcribe them using an existing library like CMU Sphinx - Not started
3. Analyze and store the pitch, inflection, and speed of the sample speech for each phonetic segment - Not started
4. Output the results of analysis in a structured text or binary file - Not started

Current instruction for you:
To begin with, please write a Python script that opens and reads the audio files in the provided directory (C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09). Make sure that your script is capable of reading these audio files and ensure file path compatibility. You can use libraries such as os, glob and soundfile for this task.Current documentation stored in user_documentation.txt:
No documentation written yet.

01:
To-do:
1. Write a Python script to open and read audio files in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09 - Completed
2. Break down each audio file into smaller segments and transcribe them using an existing library like CMU Sphinx - Not started
3. Analyze and store the pitch, inflection, and speed of the sample speech for each phonetic segment - Not started
4. Output the results of analysis to a structured text or binary file - Not started

Current instruction for you:
Moving on to the next task, I'd like you to amend the above code to break down each audio file into smaller segments and then transcribe these segments using an existing library such as CMU Sphinx. For simplicity, you can start with breaking down the audio into 5 second segments. Please use the pocketsphinx library for the task of transcription. 
Contents of None
No file requested
Could not find fetched file. Please make sure the requested file was listed in user_documentation.txt
Current documentation stored in user_documentation.txt:
File name: extract_phonetic_data.py
Content: This script includes a placeholder function named "extract_phonetic_data" intended for phonetic data extraction from .wav files. It takes a file path as its argument, but currently it only returns a dummy phonetic symbol as the actual extraction has not been implemented yet.
******

******
File name: access_directory_script.py
Content: This is a Python script (~access_directory_script.py) for accessing the directory located at "C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09". When run, it checks if the specified directory exists and returns a confirmation message.
******
******
File name: extract_phonetic_data.py
Content: This Python script (~extract_phonetic_data.py) houses the 'extract_sound_samples' function, to isolate phonetic data from the provided .wav file. Currently, the function only opens the file and the actual extraction process has not been implemented yet. The file opening process includes error handling and will raise a custom 'FileOpeningError' located in the "exceptions.py" script if any issues occur.
******

******
File name: exceptions.py
Content: This Python file (~exceptions.py) includes a custom exception class 'FileOpeningError'. This exception is thrown when there are errors opening files, such as the file not being found or other input-output problems.
******

******
File name: extract_phonetic_data.py
Content: The Python script (~extract_phonetic_data.py) now imports the defined exceptions and includes improved error handling. In the function 'extract_sound_samples' if the file does not exist or there are input-output issues while opening the file, a 'FileOpeningError' is raised. However, the function is yet to include the logic to process and extract sound samples.
******
******
File name: extract_phonetic_data.py
Content: The script (~extract_phonetic_data.py) features an updated extract_sound_samples() function, now able to process and isolate phonetic sounds from files using the 'librosa' library. This includes processing the audio file, converting to mono, and splitting it into frames. A spectral centroid value is calculated for each frame, and any frames with a higher value are stored as 'phonetic_sounds'. The function raises a 'FileOpeningError' for error related to file opening and a 'SoundProcessingError' if any other exceptions occur during sound processing.
******
******


