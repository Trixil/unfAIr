File name: convert_audio.p
Content: one
Message: I'll write a Python function which uses the "soundfile" module to read the '.wav' files and convert them into numpy arrays suitable for easy parsing. Here is the corresponding code implementing this.
Code:
```python
import numpy as np
import soundfile as sf

def convert_audio_to_numpy(file_path):
    try:
        data, samplerate = sf.read(file_path)
        return np.array(data), samplerate
    except Exception as e:
        print(f"Failed to convert audio to numpy: {e}")
        return None

converted_samples = [convert_audio_to_numpy(os.path.join(voice_samples_path, sample)) for sample in voice_samples]
```
File name: convert_audio.py
******
File name: wav_to_numpy.py
Content: This file contains a function named 'wav_to_numpy'. It reads a .wav file from a given filepath and converts it into a numpy array. It also includes a 'main' function which iterates through all the .wav files in the specified directory and uses 'wav_to_numpy' function to convert them into numpy arrays. The directory path is taken as a command-line argument.
******

******
File name: convert_wav_to_numpy.py
Content: This file contains functions for converting .wav audio files into numpy arrays. The main function 'main' loops through all .wav files in a given directory, applies 'wav_to_numpy' function to convert each file into a numpy array, and then saves the arrays in the specified directory. The file path would look like this: ~convert_wav_to_numpy.py or ~/path_to_file/convert_wav_to_numpy.py.
******
******
File name: convert_wav_to_numpy.py
Content: The Python script named convert_wav_to_numpy.py is found in the current directory. It includes functions to convert audio data from .wav files into numpy arrays. This conversion is useful for audio data processing, such as machine learning tasks. The conversion is facilitated by the function wav_to_numpy(file_path), which takes a single parameter, file_path, that specifies the path to a .wav file. The function reads data from the file, converts it into a numpy array, and returns the result. If errors occur during the conversion, the function will notify the user and return None. To convert multiple .wav files, located in a specified directory, the main(input_directory, output_directory) function is used. It automatically searches for .wav files in the input_directory, converts them into numpy arrays with the help of wav_to_numpy(), and stores the resulting arrays in the output_directory.
******

******
File name: corrected_convert_wav_to_numpy.py
Content: A python file located at ~corrected_convert_wav_to_numpy.py, which includes a function, wav_to_numpy, to convert .wav audio files into numpy arrays. The file also includes a main function that iterates over all .wav files in a given directory, converts them into numpy arrays using wav_to_numpy and then saves them to a specified directory. The file utilizes SciPy for the transformation of .wav to numpy arrays and the os library for directory management.
******
******
File name: convert_wav_to_numpy.py
Content: This is a Python script stored at ~convert_wav_to_numpy.py which includes the main() function. This function is used to convert all .wav files in a specific directory into numpy arrays and then save them in a designated output directory. It only processes .wav files. If the output directory does not exist, the function will create it. It utilises another function wav_to_numpy() to perform the conversion. Recently, the 'wav_array' variable used in the numpy.save() function was renamed to 'wav_data' to better reflect its purpose.
******
******
File name: convert_wav_to_numpy.py
Content: 
This file (~convert_wav_to_numpy.py) contains code for converting wave files to numpy arrays. It defines a main function that converts all .wav files in a specified directory into numpy arrays. It then saves these arrays in the specified directory, given by the arguments `input_directory` and `output_directory`. A highlighted update in this function is the replacement of variable 'wav_array' with 'wav_data' within the numpy.save() function.
******
******
File name: speech_pitch_alteration.py
Content: one
Message: I will update the script to allow pitch alteration using the pydub library in Python. The updated script will include a class 'Speech' that will have methods for text to speech conversion and pitch alteration. A ÅepitchÅf parameter will be added to the speech_to_audio method that will adjust pitch. 
File name: speech_pitch_alteration.py
Code: 
```python
from gtts import gTTS
from pydub import AudioSegment
import os

class Speech:
    def __init__(self, lang='en', slow=False):
        self.lang = lang
        self.slow = slow

    def text_to_speech(self, text):
        speech = gTTS(text=text, lang=self.lang, slow=self.slow)
        speech.save('generated_speech.mp3')
        return 'generated_speech.mp3'

    def alter_pitch(self, audio_file_path, octaves):
        audio = AudioSegment.from_file(audio_file_path, format='mp3')
        new_audio = audio.speedup(playback_speed=1.0 + octaves)
        new_audio.export('pitch_altered_speech.mp3', format='mp3')
        return 'pitch_altered_speech.mp3'

# Running example
s = Speech()
text = "Hello, this is a text to speech conversion demo"
audio_file = s.text_to_speech(text)
s.alter_pitch(audio_file, 0.5) 
```
In this script, 'text_to_speech' converts text into speech and 'alter_pitch' adjusts the pitch of a given audio file.
******
File name: text_to_speech.py
Content: This file (~text_to_speech.py) contains a Python class "TextToSpeech" used to convert a given text to speech. It uses the pyttsx3 library for the text to speech conversion and pydub library for audio manipulation. The class has three methods: the initialisation method, a method to convert the text to speech (convert_text_to_speech), and a method to alter the pitch of the synthesized speech (alter_pitch). The alter_pitch method takes a percentage as input to increase or decrease the pitch of the audio.
******
******
File name: text_to_speech_alter_tempo.py
Content: This script has been added to the project to introduce the functionality to adjust the tempo of the synthesized speech. It uses the `pydub` library and maintains the object-oriented structure of the program. The `alter_tempo` function in particular alters the tempo (speed of speech) according to the user's input percentage value. The calculation of the new tempo relies on the `speedup` or `slowdown` functionality of the `pydub` library, allowing for a user-specified increase or decrease in tempo.
******
******
File name: text_to_speech.py
Content: 

~
text_to_speech.py

This file houses the TextToSpeech class, which provides functions to convert text into speech and apply adjustments to the pitch and tempo of the resulting audio clip based on the user's input.

In particular:
- The `convert_text_to_speech` function takes in a text string, converts it into speech using the pyttsx3 library, and stores the resulting audio clip within a class-wide AudioSegment object.
- The `alter_pitch` function manipulates the pitch of the previously saved audio clip. Positive input values increase the pitch, while negative values decrease it.
- The `alter_tempo` function similarly changes the speed (or tempo) of the audio. Positive input values speed up the playback, while negative values slow it down.

Both `alter_pitch` and `alter_tempo` save the modified audio as "altered_speech.wav". The resulting audio can be accessed by checking the current directory of the script.
******

******
