01: Fetch: None
File name: access_directory_script.py
Code:
```python
import os

# Function to access a specific directory
def access_directory(directory_path):
    try:
        os.chdir(directory_path)
        print(f"Directory {directory_path} accessed successfully")
    except FileNotFoundError:
        print("The directory does not exist")

# Test accessing the specific directory
access_directory("C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09")
```
01: Fetch: None
File name: access_directory.py
Code:
```python
import os

directory_path = "C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09"

def access_directory(directory_path):
    try:
        os.listdir(directory_path) 
        print("Directory accessed successfully.")
        task_status = "Completed"
    except Exception as e:
        print("Could not access the directory. Error - ", str(e))
        task_status = "In Progress"

access_directory(directory_path)
```
01: Fetch: None
File name: enumerate_audio_files.py
Code:
```python
import os
import mutagen

directory_path = "C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09"

def enumerate_audio_files(directory_path):
    audio_files_data = { "filenames": [], "metadata": [] } # To store filenames and metadata of audio files

    for filename in os.listdir(directory_path):
        if filename.endswith((".mp3", ".wav", ".flac")):
            audio_files_data["filenames"].append(filename)

            file_path = os.path.join(directory_path, filename)
            file_metadata = mutagen.File(file_path, easy=True)

            audio_files_data["metadata"].append(dict(file_metadata))

    return audio_files_data

enumerate_audio_files(directory_path)
```
01: Fetch: audio_files_handler.py
File name: transcript_handler.py
Code:
```python
import os
import speech_recognition as sr
from pydub import AudioSegment

def transcribe_audio_files(audio_files):
    recognizer = sr.Recognizer()
    transcriptions = []
    for audio_file in audio_files:
        audio_data = AudioSegment.from_wav(audio_file)
        audio_data.export("temp.wav", format="wav")
        with sr.AudioFile("temp.wav") as source:
            audio = recognizer.record(source)
            try:
                transcription = recognizer.recognize_google(audio)
                transcriptions.append((audio_file, transcription))
            except sr.UnknownValueError:
                transcriptions.append((audio_file, "Google Speech Recognition could not understand audio"))
            except sr.RequestError as e:
                transcriptions.append((audio_file, "Could not request results from Google Speech Recognition service; {0}".format(e)))
    os.remove("temp.wav")
    return transcriptions
```
In this script, we assume that the input 'audio_files' are the list of filenames obtained from previous instructions. This script will iterate through each audio file, convert the audio file to a temporary .wav file ('temp.wav') that is compatible with the Google's Speech Recognition, transcribe the audio, append the filename and its corresponding transcription to the 'transcriptions' list, and then repeat the process for the next audio file. After all audio files have been transcribed, 'temp.wav' is removed, and a list of tuples is returned where the first element of the tuple is the filename and the second element is the transcription.

This code does not handle the preprocessing of audio data or the saving of transcriptions and filenames to a .csv file. Note that this code also does not handle errors that might arise if an audio file is unable to be opened or exported. You would need to implement these portions of the software objectives yourself or through another team member.
