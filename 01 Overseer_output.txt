01 Overseer: To-do:
1. Access the voice samples in the assigned directory. (Not Started)
2. Convert these audio files into an easily parsed format. (Not Started)
3. Analyze the frequency, pitch, and tempo of the sound files. (Not Started)
4. Generate a statistics report on the pitch, frequency, and tempo variation of the voice samples. (Not Started)

Current instruction for you:
Begin by writing a script to open and read the files in the directory "C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09". Use python's "os" module to list all the files in the directory. After this, initiate the process of accessing the voice samples. You don't need to process the files yet, just access them.
01 Overseer: To-do:
1. Access the voice samples in the assigned directory. (Completed)
2. Convert these audio files into an easily parsed format. (Not Started)
3. Analyze the frequency, pitch, and tempo of the sound files. (Not Started)
4. Generate a statistics report on the pitch, frequency, and tempo variation of the voice samples. (Not Started)

Current instruction for you:
Great! You have successfully accessed the voice samples. Now, write a Python function which uses the "soundfile" module to read the '.wav' files and convert them into numpy arrays for easy parsing. This is the beginning of task 2. Go ahead and implement that.
01 Overseer: Current instruction for you:
Add a main function to the script that loops through all .wav files in a directory and uses the `wav_to_numpy` function to convert them into numpy arrays. The directory should be passed as a command-line argument. Save the numpy arrays in a separate directory also passed as a command-line argument.

Code:
```python
import os
import sys
import numpy as np
import soundfile as sf

def wav_to_numpy(filepath):
    '''
    Reads a .wav file and converts it to a numpy array
    Args: 
        filepath (str) - The path to the .wav file
    Returns:
        ndarray: numpy array with the content of the .wav file
    '''

    data, samplerate = sf.read(filepath)
    return data

def main(audio_dir, numpy_dir):
    '''
    Loops through .wav files in a directory and converts them to numpy arrays
    Args:
        audio_dir (str) - The directory that contains the .wav files
        numpy_dir (str) - The directory where the numpy arrays will be saved
    '''
    for filename in os.listdir(audio_dir):
        if filename.endswith(".wav"):
            data = wav_to_numpy(os.path.join(audio_dir, filename))
            np.save(os.path.join(numpy_dir, filename), data)

if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
```

To-do:
1. Access the voice samples in the assigned directory. (Completed)
2. Convert these audio files into an easily parsed format. (In Progress)
3. Analyze the frequency, pitch, and tempo of the sound files. (Not Started)
4. Generate a statistics report on the pitch, frequency, and tempo variation of the voice samples. (Not Started)
01 Overseer: To-do:
1. Loop through all .wav files in a directory (Completed)
2. Convert .wav files into numpy arrays (Completed)
3. Save numpy arrays in a specified directory (Completed)

The current code provides a function `wav_to_numpy` to convert a .wav file into a numpy array. It also includes a `main` function that leverages `wav_to_numpy` to loop through all .wav files in a given directory, convert them into numpy arrays, and saves these arrays in a specified directory.

Current instruction for you:
Check the implementation of error handling. If a .wav file cannot be converted into a numpy array, the script should log an error message with the name of the problematic file and continue with the next one. Let's handle exceptions to ensure the program does not stop midway. 

Please create a function that handles the exceptions raised during the reading and conversion process in `wav_to_numpy` function. The function should return None when an error occurs and should print an error message along with the name of the problematic file. Afterwards, update the `main` function to ignore files returned as None by `wav_to_numpy` function and proceed to the next file.

Include the new function in the current Python file `convert_wav_to_numpy.py`. Provide the updated Python code once the implementation is done.
01 Overseer: Current instruction for you:
Please check the `main` function implementation, specifically the line where the `.npy` file is saved. It seems there's a mistake in the variable name: `np.save(output_directory + '/' + file_name.replace('.wav', '.npy'), wav_array)`. The variable `wav_array` is not defined in the provided context. The correct variable should be `wav_data`, the one holding the result from `wav_to_numpy()`. Please amend this code and resend the corrected version.

To-do:
1. Loop through all .wav files in a directory (Completed)
2. Convert .wav files into numpy arrays (Completed)
3. Save numpy arrays in a specified directory (In Progress)
01 Overseer: To-do:
1. Correct and save the `convert_wav_to_numpy.py` script (In Progress)

Current instruction for you:
Replace `wav_array` with `wav_data` as the variable used when saving the numpy array in the `main` function of the `convert_wav_to_numpy.py` script. Confirm amendment by sending the revised code block of the `main` function.
01 Overseer: Current instruction for you: Confirm the following changes - 'wav_array' has been replaced by 'wav_data' in the numpy.save() function in the 'main' function, in the `convert_wav_to_numpy.py` script.

To-do:
1. Correct and save the `convert_wav_to_numpy.py` script (In Progress)
01 Overseer: To-do:
1. Correct and save the `convert_wav_to_numpy.py` script (Completed)

Current instruction for you: The code implementation for replacing 'wav_array' with 'wav_data' in the numpy.save() function in the 'main' function, in the `convert_wav_to_numpy.py` script has been confirmed and is correct. With this, task 1 in the To-do list is now completed. 

SEND CODE
