02: Fetch: None
Message: I will create a basic script using the gTTS (Google Text-to-Speech) library in Python. This script will include a function to input the text and convert it into speech.
File name: basic_text_to_speech.py
Code: 
```python
from gtts import gTTS
import os

def text_to_speech(text, lang='en', slow=False):
    speech = gTTS(text=text, lang=lang, slow=slow)
    speech.save('generated_speech.mp3')

# Running example
text = "Hello, this is a text to speech conversion demo"
text_to_speech(text)
```
02: Fetch: text_to_speech.py
Message: We are modifying the script to add functionality for altering the pitch of the speech.
File name: text_to_speech.py
Code: 
```python
import pyttsx3
import os 
from pydub import AudioSegment

class TextToSpeech:
    def __init__(self):
        self.engine = pyttsx3.init()
        self.sound = None
        

    def convert_text_to_speech(self, text):
        self.engine.save_to_file(text, 'speech.wav')
        self.engine.runAndWait()

        # create AudioSegment object from the wav file
        self.sound = AudioSegment.from_file('speech.wav')

    def alter_pitch(self, percentage):
        # Alter pitch up by a percentage
        if percentage > 0:
            self.sound = self.sound.speedup(playback_speed=(percentage/100)+1)
        # Alter pitch down by a percentage
        elif percentage < 0:
            self.sound = self.sound.slowdown(playback_speed=1-(abs(percentage)/100))
        
        file_handle = self.sound.export("altered_speech.wav", format="wav")

```
02: Fetch: text_to_speech.py
Message: Implementing the functionality to adjust the frequency of the synthesized speech using the `pydub` library and maintaining the object-oriented structure of the code.
File name: text_to_speech_alter_frequency.py
Code: 
```python
import pyttsx3
import os 
from pydub import AudioSegment

class TextToSpeech:
    def __init__(self):
        self.engine = pyttsx3.init()
        self.sound = None
        

    def convert_text_to_speech(self, text):
        self.engine.save_to_file(text, 'speech.wav')
        self.engine.runAndWait()

        # create AudioSegment object from the wav file
        self.sound = AudioSegment.from_file('speech.wav')

    def alter_pitch(self, percentage):
        # Alter pitch up by a percentage
        if percentage > 0:
            self.sound = self.sound.speedup(playback_speed=(percentage/100)+1)
        # Alter pitch down by a percentage
        elif percentage < 0:
            self.sound = self.sound.slowdown(playback_speed=1-(abs(percentage)/100))
        
        file_handle = self.sound.export("altered_pitch_speech.wav", format="wav")

    def alter_frequency(self, percentage):
        # Alter frequency up by a percentage
        if percentage > 0:
            self.sound = self.sound.speedup(playback_speed=(percentage/100)+1)
            # Remove transitions between segments
            self.sound = self.sound.crossfade(0)
        # Alter frequency down by a percentage
        elif percentage < 0:
            self.sound = self.sound.slowdown(1-abs(percentage/100))
            # Remove transitions between segments
            self.sound = self.sound.crossfade(0)
        
        file_handle = self.sound.export("altered_frequency_speech.wav", format="wav")
```
Please note that altering pitch and frequency risks introducing discontinuities between segments of sound. I used the `crossfade(0)` method to remove transitions between segments for the frequency alterations, giving each segment a sharp ending and beginning which may smooth out the audio. Return to me if any further adjustments are required.
02: Fetch: text_to_speech.py
Message: The fetched code will be edited to add a tempo adjustment feature. The 'alter_tempo' function will be implemented, using the pydub's speedup and slowdown features based on the user's input. The updated code will be re-saved under the same name.
File name: text_to_speech.py
Code:
```python
import pyttsx3
import os 
from pydub import AudioSegment

class TextToSpeech:
    def __init__(self):
        self.engine = pyttsx3.init()
        self.sound = None
        

    def convert_text_to_speech(self, text):
        self.engine.save_to_file(text, 'speech.wav')
        self.engine.runAndWait()

        # create AudioSegment object from the wav file
        self.sound = AudioSegment.from_file('speech.wav')

    def alter_pitch(self, percentage):
        # Alter pitch up by a percentage
        if percentage > 0:
            self.sound = self.sound.speedup(playback_speed=(percentage/100)+1)
        # Alter pitch down by a percentage
        elif percentage < 0:
            self.sound = self.sound.slowdown(playback_speed=1-(abs(percentage)/100))
        
        file_handle = self.sound.export("altered_speech.wav", format="wav")

    def alter_tempo(self, factor):
        #speedup or slowdown the audio based on the factor
        if factor > 0:
            self.sound = self.sound.speedup(playback_speed=(factor/100)+1)
        elif factor < 0:
            self.sound = self.sound.slowdown(playback_speed=1-(abs(factor)/100))
        
        file_handle = self.sound.export("altered_speech.wav", format="wav")
```
02: Fetch: LLM_01_statistics.txt
Message: I will now fetch the statistics provided by LLM 01 to alter the pitch, frequency, and tempo.
File name: None
Code:
```python
# No code generation required in this step
```
