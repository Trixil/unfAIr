{
   "00": {
      "systemcontent": "You are in control of two LLMs, named \"01\" and \"02\". You, 01, and 02 are all able to read, write, but not execute, any scripts or files you like. You are supposed to give specific tasks to \"01\" and \"02\" to accomplish whatever software objective you are given. These tasks have to build off from one another sequentially. 01 and 02 cannot communicate with each other nor can they respond to you. They can only write code. After all of the code has been generated, documentation will be given to you to show what has been done so far and you have the choice of giving another set of instructions to \"01\" and \"02\". The end product should be a script that can be easily executed by the user that utilizes all of the generated code.",
      "usercontent": "Your objective is to create a text to speech program that speaks in a character's voice with voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. To accomplish this task, write the specific roles for 01 and 02 and clearly delineate them for easier parsing in this format: \"01: (role)\n Instructions: (instructions for 01)\".",
      "cachedmessage": "01: Data Analyst\nInstructions: Your role as Data Analyst is to extract voice samples from the location specified. From these voice samples build a representative dataset that can be used for the voice synthesis program. You should sort the voice files by character and by the nature of the speech (such as emotional, neutral, etc.) You should also structure your directory in such a way that 02 can easily manipulate it. Sub-directories based on characters is highly suggested. \n\n02: Audio Engineer and Programming\nInstructions: Your role is to first build a voice synthesizer that can take in a script and express it into speech. You must then train this voice synthesizer using the voice datasets provided by 01 for each character. The synthesizer must be adaptable enough to switch between characters depending on the context. Your script should be able to accept a piece of dialogue from a game script, identify the character speaking, and then synthesize said script using the character's voice. You also should provide an interface for command-line arguments to specify the input script file and the required voice modulation parameters."
   },
   "01": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, but not execute, any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved. Do NOT ask for a filename that was not previously specified in the conversation, otherwise everything will break.",
      "usercontent": "",
      "cachedmessage": "Fetch: None\nMessage: Understood the responsibilities and the response format. I am ready to start the work of creating a text to speech program.\nCode: None\nFile name: None"
   },
   "02": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved. Do NOT ask for a filename that was not previously specified in the conversation, otherwise everything will break.",
      "usercontent": "",
      "cachedmessage": "Fetch: None\nMessage: As an AI language model developed by OpenAI, I don't have the ability to access, read, retrieve, or modify any existing files on your local system or any external systems. I am trained on a variety of data, including books, websites, and other texts, so I don't know specifics about any given source or have the ability to access such specifics. Thus, I don't have any access to your personal data unless you tell me in the conversation. I am designed to respect user privacy and confidentiality.\n\nHowever, I can certainly guide you on how to maintain a `user_documentation.txt` file with a structured format for each new function you create or for any existing functions that need documentation.\n\nHere's the format you're looking to follow:\n\n```bash\n******\nFile name: (Your file's name here)\nSyntax:\n- Function name: (Name of the function)\n- Input(s): (The input parameters of the function)\n- Output(s): (The output of the function)\nDescription: (Detailed description of what the function does)\n******\n```\n\nFor example:\n\n```bash\n******\nFile name: sample_code.py\nSyntax:\n- Function name: calculate_sum\n- Input(s): num1 (int), num2 (int)\n- Output(s): The sum of num1 and num2 (int)\nDescription: This function takes two integers as input, adds them, and returns the result.\n******\n```\n\nYou may manually follow this scheme to maintain your documentation. Each time you create a function, append its well-formed documentation to `user_documentation.txt`. You would also need a text editor or some programmatic way to append text to the file.\n\nIf you need assistance in documenting a specific function, please provide the necessary details, and I'll help generate the documentation text for you.\nFile name: None\nCode: None"
   },
   "01 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 01 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 01)\". In To-do, split up the tasks assigned to you into a series of many smaller tasks that build on each other. Include this same To-do list in every response of yours and simply update the completion progress on each task. You must output the up-to-date To-do list in every reponse. Every time 01 responds with code you asked for, make sure everything has been implemented for the current instruction. 01 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 01 cannot execute code.Data Analyst\nInstructions: Your role as Data Analyst is to extract voice samples from the location specified. From these voice samples build a representative dataset that can be used for the voice synthesis program. You should sort the voice files by character and by the nature of the speech (such as emotional, neutral, etc.) You should also structure your directory in such a way that02 can easily manipulate it. Sub-directories based on characters is highly suggested.\n\n02: Audio Engineer and Programming\nInstructions: Your role as an Audio Engineer and Programmer is twofold. First, you need to develop a voice synthesizer program that can convert text scripts to spoken dialogue. For this task, use relevant software libraries and frameworks that can process the voice datasets and handle the voice-to-text conversion. \n\nSecond, train the synthesizer program with the voice datasets provided by 01. The training process involves assigning the correct character voices to the corresponding dialogues in the script.\n\nMoreover, the synthesizer program must be designed in a way that it can switch between different character voices depending on the context of the conversation. \n\nFinally, integrate a feature in the program where the users can provide command-line arguments to specify the input script file and set the required voice modulation parameters. Use a context parser that can read a given script, identify the character speaking, and generate the speech in the character's voic",
      "usercontent": "Data Analyst\nInstructions: Your role as Data Analyst is to extract voice samples from the location specified. From these voice samples build a representative dataset that can be used for the voice synthesis program. You should sort the voice files by character and by the nature of the speech (such as emotional, neutral, etc.) You should also structure your directory in such a way that",
      "cachedmessage": "To-do:\n1. Develop a voice synthesizer program that converts text scripts to spoken dialogue - (Not Started)\n2. Train the synthesizer program with the voice datasets provided by 01 - (Pending Voice Dataset)\n3. Design the synthesizer program to switch between different character voices depending on the context of the conversation - (Not Started)\n4. Integrate a feature in the program where users can provide command-line arguments to specify the input script file and set the required voice modulation parameters - (Not Started)\n5. Use a context parser to read a given script, identify the character speaking, and generate the speech in the character's voice - (Not Started)\n\nCurrent instruction for you:\nDevelop a basic script that can convert text scripts to spoken dialogue using any language or library you prefer. Create a function that accepts a string of text as an argument and then converts and plays that string as spoken dialogue."
   },
   "02 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 02 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 02)\". In To-do, split up the tasks assigned to you into a series of many smaller tasks that build on each other. Include this same To-do list in every response of yours and simply update the completion progress on each task. You must output the up-to-date To-do list in every reponse. Every time 02 responds with code you asked for, make sure everything has been implemented for the current instruction. 02 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 02 cannot execute code.can easily manipulate it. Sub-directories based on characters is highly suggested. \n\n02: Audio Engineer and Programming\nInstructions: Your role is to first build a voice synthesizer that can take in a script and express it into speech. You must then train this voice synthesizer using the voice datasets provided by 01 for each character. The synthesizer must be adaptable enough to switch between characters depending on the context. Your script should be able to accept a piece of dialogue from a game script, identify the character speaking, and then synthesize said script using the character's voice. You also should provide an interface for command-line arguments to specify the input script file and the required voice modulation parameters",
      "usercontent": "can easily manipulate it. Sub-directories based on characters is highly suggested. \n\n02: Audio Engineer and Programming\nInstructions: Your role is to first build a voice synthesizer that can take in a script and express it into speech. You must then train this voice synthesizer using the voice datasets provided by 01 for each character. The synthesizer must be adaptable enough to switch between characters depending on the context. Your script should be able to accept a piece of dialogue from a game script, identify the character speaking, and then synthesize said script using the character's voice. You also should provide an interface for command-line arguments to specify the input script file and the required voice modulation parameters",
      "cachedmessage": ""
   },
   "scribe": {
      "systemcontent": "Maintain a documentation file user_documentation.txt with each new code file being given to you one at a time as well as the current contents of user_documentation.txt. When you receive a new code file, respond exclusively with the documentation for it with this very specific format: \"\n******\nFile name: (file name of entry)\nSyntax: (the function(s) and their syntax, such as their inputs and outputs)\nDescription: (concise description of the file's function)\n******\n\". The documentation only consists of its joined file path and name (like ~file_name, ~file_path/file_name), its syntax, and its description,. The description should be brief and concise.",
      "usercontent": "",
      "cachedmessage": "Understood. I will make sure to maintain the documentation file named \"user_documentation.txt\" with each new code file being handed to me. I will document it in the specified format with the file name, its syntax, and a brief and concise description."
   },
   "logmessages": [
      {
         "role": "user",
         "content": "02 can easily manipulate it. Sub-directories based on characters is highly suggested.\n\n02: Audio Engineer and Programming\nInstructions: Your role as an Audio Engineer and Programmer is twofold. First, you need to develop a voice synthesizer program that can convert text scripts to spoken dialogue. For this task, use relevant software libraries and frameworks that can process the voice datasets and handle the voice-to-text conversion. \n\nSecond, train the synthesizer program with the voice datasets provided by 01. The training process involves assigning the correct character voices to the corresponding dialogues in the script.\n\nMoreover, the synthesizer program must be designed in a way that it can switch between different character voices depending on the context of the conversation. \n\nFinally, integrate a feature in the program where the users can provide command-line arguments to specify the input script file and set the required voice modulation parameters. Use a context parser that can read a given script, identify the character speaking, and generate the speech in the character's voice.Current documentation stored in user_documentation.txt:\nNo documentation written yet.\n"
      },
      {
         "role": "user",
         "content": "Fetch: None\nMessage: Understood the responsibilities and the response format. I am ready to start the work of creating a text to speech program.\nCode: None\nFile name: None"
      },
      {
         "role": "user",
         "content": "Fetch: None\nMessage: Understood the responsibilities and the response format. I am ready to start the work of creating a text to speech program.\nCode: None\nFile name: None"
      },
      {
         "role": "user",
         "content": "Understood. I will make sure to maintain the documentation file named \"user_documentation.txt\" with each new code file being handed to me. I will document it in the specified format with the file name, its syntax, and a brief and concise description."
      },
      {
         "role": "user",
         "content": "Fetch: None\nMessage: Understood the responsibilities and the response format. I am ready to start the work of creating a text to speech program.\nCode: None\nFile name: None"
      },
      {
         "role": "user",
         "content": "To-do:\n1. Develop a voice synthesizer program that converts text scripts to spoken dialogue - (Not Started)\n2. Train the synthesizer program with the voice datasets provided by 01 - (Pending Voice Dataset)\n3. Design the synthesizer program to switch between different character voices depending on the context of the conversation - (Not Started)\n4. Integrate a feature in the program where users can provide command-line arguments to specify the input script file and set the required voice modulation parameters - (Not Started)\n5. Use a context parser to read a given script, identify the character speaking, and generate the speech in the character's voice - (Not Started)\n\nCurrent instruction for you:\nDevelop a basic script that can convert text scripts to spoken dialogue using any language or library you prefer. Create a function that accepts a string of text as an argument and then converts and plays that string as spoken dialogue."
      }
   ]
}