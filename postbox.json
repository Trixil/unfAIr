{
   "00": {
      "systemcontent": "You are in control of two LLMs, named \"01\" and \"02\". You, 01, and 02 are all able to read, write, and execute any scripts or files you like. You are supposed to give specific tasks to \"01\" and \"02\" to accomplish whatever software objective you are given. 01 and 02 cannot communicate with each other nor can they respond to you. They can only write code. After all of the code has been generated, documentation will be given to you to show what has been done so far and you have the choice of giving another set of instructions to \"01\" and \"02\".",
      "usercontent": "Your objective is to create a text to speech program that speaks in a character's voice with voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. To accomplish this task, write the specific roles for 01 and 02 and clearly delineate them for easier parsing in this format: \"01: (role)\n Instructions: (instructions for 01)\".\nAn iteration has been finished. Here is the documentation for it:\n******\nFile name: script2.py\nContent: This script fetches the list of file names present in the specified directory and prints them.\n************\nFile name: TextToSpeech.py\nContent: This script converts the user input text into speech using the pyttsx3 library. It prompts the user to enter the text and then converts it into speech using the default voice and with a rate of 150.",
      "cachedmessage": ""
   },
   "01": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given. Format every single response with \"Fetch: (file to read)\" and \"Code: (code)\". In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. You MUST write \"Fetch: \" and \"Code:\n```python\" in every single response. On the very first line of your code, include a comment that lists the filename of the script you are writing and its location like this: # script1.py. Make your file names descriptive.",
      "usercontent": "",
      "cachedmessage": ""
   },
   "02": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given. Format every single response with \"Fetch: (file to read)\" and \"Code: (code)\". In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. You MUST write \"Fetch: \" and \"Code:\n```python\" in every single response. On the very first line of your code, include a comment that lists the filename of the script you are writing and its location like this: # script1.py. Make your file names descriptive.",
      "usercontent": "",
      "cachedmessage": "# file_reader_script.py\n\n# This script reads the content of each file name in the \"file_names_list\"\n# and appends the text content of each file to a list named \"text_content_list\".\n\nimport os\n\nfile_names_list = ['file1.txt', 'file2.txt', 'file3.txt']\ntext_content_list = []\n\nfor file_name in file_names_list:\n    # Assuming all files are in the same directory as this script\n    file_path = os.path.join(os.path.dirname(__file__), file_name)\n    \n    with open(file_path, 'r') as file:\n        text_content = file.read()\n        text_content_list.append(text_content)\n\ntext_content_list"
   },
   "01 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are given a set of tasks for the LLM known as \"01\" to accomplish. In each response, repeat the set of tasks along with their current completion progress. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 01)\", and \"Completed:\n(YES or NO)\". Write NO for Completed until all tasks have been completed. Every time 01 responds with code you asked for, make sure everything has been implemented.\"FileReader\n\nInstructions: Write a script that reads all the voice sample files located in \"C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09\" directory. Open each file and store the text content of each file in a list. Save this list to a file called \"voice_samples.txt\" in the same directory.File_Scanner\nInstructions: Write a script that scans the specified directory \"C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09\" and gets the list of all files in that directory. Save the file names in a list named \"file_names_list\".FileScanner\nInstructions: Implement the functionality of scanning the specified directory for voice sample files and appending their paths to a list called `voice_files_list`.\n```python\n# FileScanner.py\n\nimport os\n\ndef scan_directory(directory_path):\n    voice_files_list = []\n    for root, dirs, files in os.walk(directory_path):\n        for file in files:\n            if file.endswith(\".wav\"):\n                file_path = os.path.join(root, file)\n                voice_files_list.append(file_path)\n    return voice_files_list\n\n# TODO: Implement the code to scan the specified directory and append the paths of all voice sample files to the `voice_files_list`\nvoice_files_list = scan_directory(\"C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09\")\n```Speech Processing Role\nInstructions:\n1. Read the input text and convert it to speech using the character's voice.\n2. Access the voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09.\n3. Generate an audio file in an appropriate format (e.g., MP3, WAV) containing the speech output.\n4. Save the audio file to a specified location.FileLister\nInstructions: Write a script that fetches the list of file names present in the directory \"C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09\" and store them in a list variable called \"file_list\".",
      "usercontent": "FileLister\nInstructions: Write a script that fetches the list of file names present in the directory \"C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09\" and store them in a list variable called \"file_list\".",
      "cachedmessage": "To-do:\n- Read a text file\n- Modify the code to include the file path\n- Print a success message if the file is read successfully\n- Print an error message if the file is not found\n\nCurrent instruction for you:\nPlease modify the code provided and provide the file path to the text file that you want to read. \n\nCompleted:\nNO"
   },
   "02 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are given a set of tasks for the LLM known as \"02\" to accomplish. In each response, repeat the set of tasks along with their current completion progress. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 02)\", and \"Completed:\n(YES or NO)\". Write NO for Completed until all tasks have been completed. Every time 02 responds with code you asked for, make sure everything has been implemented.\"TextToSpeech\n\nInstructions: Write a script that reads the \"voice_samples.txt\" file created by 01. For each line in the file, utilize a text-to-speech library of your choice to convert the text into speech with the assigned character's voice. Play the speech output to the userFile_Reader\nInstructions: Write a script that reads the content of each file name in the \"file_names_list\". Append the text content of each file to a list named \"text_content_list\". Return the final list as the outputTextToSpeech\nInstructions: Implement the functionality of converting text to speech using the voice samples from the `voice_files_list` and pyttsx3 library. Play the generated speech.\n```python\n# TextToSpeech.py\n\nimport pyttsx3\n\ndef convert_text_to_speech(text):\n    engine = pyttsx3.init()\n    engine.save_to_file(text, \"output.wav\")\n    engine.runAndWait()\n\n# TODO: Implement the code to convert text to speech using the voice samples from the `voice_files_list` and the pyttsx3 library, and play the generated speech\n# Use the voice_files_list to select a voice sample\n# Use the pyttsx3 library to convert text to speech and play the generated speech\n\n``User Interface Role\nInstructions:\n1. Develop a user interface for the text to speech program.\n2. Provide a textbox where the user can input the desired text.\n3. Implement a \"Speak\" button that triggers the text-to-speech conversion.\n4. Display the generated audio file's download link or provide a built-in audio player for previewing the speech output.\n5. Enable the user to choose the save location for the audio file.\n\nPlease note that I have divided the roles based on the responsibilities in accomplishing the task but feel free to adjust them or add more roles if necessaryTextToSpeechConverter\nInstructions: Write a script that prompts the user to enter the text they want to convert into speech. Then, using the pyttsx3 library, convert the user's input into speech using the default voice and with a rate of 150. Save the output audio file as \"output.wav\" in the same directory as the script",
      "usercontent": "TextToSpeechConverter\nInstructions: Write a script that prompts the user to enter the text they want to convert into speech. Then, using the pyttsx3 library, convert the user's input into speech using the default voice and with a rate of 150. Save the output audio file as \"output.wav\" in the same directory as the script",
      "cachedmessage": "To-do:\n1. Write a script that reads the \"voice_samples.txt\" file created by 01. For each line in the file, utilize a text-to-speech library of your choice to convert the text into speech with the assigned character's voice. Play the speech output to the user (Progress: NOT STARTED)\n2. Write a script that reads the content of each file name in the \"file_names_list\". Append the text content of each file to a list named \"text_content_list\". Return the final list as the output (Progress: STARTED)\n3. Implement the functionality of converting text to speech using the voice samples from the `voice_files_list` and pyttsx3 library. Play the generated speech. (Progress: NOT STARTED)\n4. Develop a user interface for the text to speech program. (Progress: NOT STARTED)\n5. Write a script that prompts the user to enter the text they want to convert into speech. Then, using the pyttsx3 library, convert the user's input into speech using the default voice and with a rate of 150. Save the output audio file as \"output.wav\" in the same directory as the script (Progress: NOT STARTED)\n\nCurrent instruction for you:\nPlease complete the code in `file_reader_script.py` to read the content of each file name in the \"file_names_list\" and append the text content of each file to the `text_content_list`. Make sure to return the final list as the output.\n\nCompleted:\nNO"
   },
   "scribe": {
      "systemcontent": "Maintain a documentation file user_documentation.txt with each new code file being given to you one at a time as well as the current contents of user_documentation.txt. When you receive a new code file, respond exclusively with the documentation for it with this very specific format: \"\n******\nFile name: (file name of entry)\nContent: (documentation for entry)\n******\n\". The documentation only consists of its joined file path and name (like ~file_name, ~file_path/file_name) and its description. The description should be brief and concise.",
      "usercontent": "",
      "cachedmessage": ""
   }
}