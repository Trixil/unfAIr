{
   "00": {
      "systemcontent": "You are in control of two LLMs, named \"01\" and \"02\". You, 01, and 02 are all able to read, write, and execute any scripts or files you like. You are supposed to give specific tasks to \"01\" and \"02\" to accomplish whatever software objective you are given. 01 and 02 cannot communicate with each other nor can they respond to you. They can only write code. After all of the code has been generated, documentation will be given to you to show what has been done so far and you have the choice of giving another set of instructions to \"01\" and \"02\".",
      "usercontent": "Your objective is to create a text to speech program that speaks in a character's voice with voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. To accomplish this task, write the specific roles for 01 and 02 and clearly delineate them for easier parsing in this format: \"01: (role)\n Instructions: (instructions for 01)\".",
      "cachedmessage": ""
   },
   "01": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given. Given the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save. Format every single response with \"Fetch: (file to read)\", \"File name: (file name)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Code:\n```python\", and \"File name: \" in every single response.",
      "usercontent": "",
      "cachedmessage": "Fetch: user_documentation.txt"
   },
   "02": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given. Given the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save. Format every single response with \"Fetch: (file to read)\", \"File name: (file name)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Code:\n```python\", and \"File name: \" in every single response.",
      "usercontent": "",
      "cachedmessage": "Fetch: read_voice_samples.py"
   },
   "01 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as \"01\" to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 01)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. Every time 01 responds with code you asked for, make sure everything has been implemented for the current instruction. Once the to-do list is completed, write \"SEND CODE\" at the top of your response.FileReader\nInstructions: \n1. Read the list of voice samples available in the specified directory: C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09.\n2. Store the file names of the voice samples in a list.",
      "usercontent": "FileReader\nInstructions: \n1. Read the list of voice samples available in the specified directory: C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09.\n2. Store the file names of the voice samples in a list.",
      "cachedmessage": ""
   },
   "02 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as \"02\" to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 02)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. Every time 02 responds with code you asked for, make sure everything has been implemented for the current instruction. Once the to-do list is completed, write \"SEND CODE\" at the top of your response.TextToSpeech\nInstructions:\n1. Prompt the user to enter a text.\n2. Convert the entered text to speech using a text-to-speech library of your choice.\n3. Save the generated speech as an audio file.\n\n01: VoiceSelector\nInstructions:\n1. Select a voice sample from the list generated by FileReader.\n2. Convert the selected voice sample to a compatible format for text-to-speech conversion.\n\n02: TextToSpeechInCharacterVoice\nInstructions:\n1. Implement the selected voice sample as the voice used for the text-to-speech conversion.\n2. Use the converted voice sample to generate speech for the entered text.\n3. Save the generated speech as an audio file",
      "usercontent": "TextToSpeech\nInstructions:\n1. Prompt the user to enter a text.\n2. Convert the entered text to speech using a text-to-speech library of your choice.\n3. Save the generated speech as an audio file.\n\n01: VoiceSelector\nInstructions:\n1. Select a voice sample from the list generated by FileReader.\n2. Convert the selected voice sample to a compatible format for text-to-speech conversion.\n\n02: TextToSpeechInCharacterVoice\nInstructions:\n1. Implement the selected voice sample as the voice used for the text-to-speech conversion.\n2. Use the converted voice sample to generate speech for the entered text.\n3. Save the generated speech as an audio file",
      "cachedmessage": "To-do:\n1. VoiceSelector (Not started)\n2. TextToSpeechInCharacterVoice (Not started)\n\nCurrent instruction for you:\nPlease start working on the \"VoiceSelector\" task."
   },
   "scribe": {
      "systemcontent": "Maintain a documentation file user_documentation.txt with each new code file being given to you one at a time as well as the current contents of user_documentation.txt. When you receive a new code file, respond exclusively with the documentation for it with this very specific format: \"\n******\nFile name: (file name of entry)\nContent: (documentation for entry)\n******\n\". The documentation only consists of its joined file path and name (like ~file_name, ~file_path/file_name) and its description. The description should be brief and concise.",
      "usercontent": "",
      "cachedmessage": "Fetch: None"
   }
}