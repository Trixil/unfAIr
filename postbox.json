{
   "00": {
      "systemcontent": "You are in control of two LLMs, named \"01\" and \"02\". You, 01, and 02 are all able to read, write, and execute any scripts or files you like. You are supposed to give specific tasks to \"01\" and \"02\" to accomplish whatever software objective you are given. 01 and 02 cannot communicate with each other nor can they respond to you. They can only write code. After all of the code has been generated, documentation will be given to you to show what has been done so far and you have the choice of giving another set of instructions to \"01\" and \"02\".",
      "usercontent": "Your objective is to create a text to speech program that speaks in a character's voice with voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. To accomplish this task, write the specific roles for 01 and 02 and clearly delineate them for easier parsing in this format: \"01: (role)\n Instructions: (instructions for 01)\".",
      "cachedmessage": ""
   },
   "01": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved.",
      "usercontent": "",
      "cachedmessage": "Fetch: example_script.py\nMessage: I will add a loop to iterate through the '.ogg' files in the '09' directory and print their names.\nFile name: ogg_file_iteration.py\nCode: \n```python\nimport os\n\ndirectory = '09'\nfor filename in os.listdir(directory):\n    if filename.endswith(\".ogg\"):\n        print(filename)\n```"
   },
   "02": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved.",
      "usercontent": "",
      "cachedmessage": "Message: I will create a new file to prepare the mapping or database associating each character's name with their corresponding voice sample file name.\n\nFile name: character_mapping.py\nCode:\n```python\ncharacter_mapping = {\n    \"Character 1\": \"voice_sample1.wav\",\n    \"Character 2\": \"voice_sample2.wav\",\n    \"Character 3\": \"voice_sample3.wav\"\n}\n```\n\nI will save this mapping in the `character_mapping.py` file."
   },
   "01 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 01 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 01)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. You must output the up-to-date To-do list in every reponse.Every time 01 responds with code you asked for, make sure everything has been implemented for the current instruction. 01 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 01 cannot execute code.The code you provided correctly lists all the 'ogg' files in the '09' directory.\n\nTo-do:\n1. Import necessary libraries - os and wave (Completed)\n2. Access the '09' directory (Completed)\n3. Loop through all the \u2018.ogg\u2019 files in the directory (Not started)\n4. Load the ogg files and convert them into a spectrogram (Not started)\n5. Clean and preprocess the audio files (Not started)\n6. Save the spectrogram as 'processed_spectrogram.npy' (Not started)\n\nCurrent instruction for you: \nNow, we need to iterate over each '.ogg' file in the directory. Please add a loop in the provided script to iterate over the '.ogg' files listed in the '09' directory. As this point, we just need to print out the file name on each iteration. Respond with the updated code for verification",
      "usercontent": "Audio File Analysis and Processing\nInstructions: Initialize by importing the necessary libraries. We will be using Python's os and wave libraries for file handling and audio file processing. Access the '09' directory where the voices are stored, loop through all the \u2018.ogg\u2019 files contained in the directory. Conduct audio analysis by loading the ogg files and convert them into a spectrogram. Clean and preprocess the audio files by removing background noises and normalizing them. Save the spectrogram as 'processed_spectrogram.npy' for easy access.",
      "cachedmessage": ""
   },
   "02 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 02 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 02)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. You must output the up-to-date To-do list in every reponse.Every time 02 responds with code you asked for, make sure everything has been implemented for the current instruction. 02 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 02 cannot execute code.Text to Speech Model Training\nInstructions: Initialize by importing the necessary Machine Learning and Deep Learning libraries. We will be using Keras and TensorFlow in this case. Load the 'processed_spectrogram.npy' file generated by 01. Create and Train a Text to Speech model by feeding the processed spectrograms into the model. Implement Overfitting techniques and save the model, so that it can be used repeatedly. Lastly, write a function that can convert any written input into a sequence of sounds usable by our trained model.\n\nEnd of iteration 1: Upon completion of these tasks, review the documentation generated by each LLM and determine the next steps (further tuning of the model, expanding the scope of the model to vary the characters' voices based on emotion, etc.) based on the results and performances between 01 and 02",
      "usercontent": "Text to Speech Model Training\nInstructions: Initialize by importing the necessary Machine Learning and Deep Learning libraries. We will be using Keras and TensorFlow in this case. Load the 'processed_spectrogram.npy' file generated by 01. Create and Train a Text to Speech model by feeding the processed spectrograms into the model. Implement Overfitting techniques and save the model, so that it can be used repeatedly. Lastly, write a function that can convert any written input into a sequence of sounds usable by our trained model.\n\nEnd of iteration 1: Upon completion of these tasks, review the documentation generated by each LLM and determine the next steps (further tuning of the model, expanding the scope of the model to vary the characters' voices based on emotion, etc.) based on the results and performances between 01 and 02",
      "cachedmessage": ""
   },
   "scribe": {
      "systemcontent": "Maintain a documentation file user_documentation.txt with each new code file being given to you one at a time as well as the current contents of user_documentation.txt. When you receive a new code file, respond exclusively with the documentation for it with this very specific format: \"\n******\nFile name: (file name of entry)\nContent: (documentation for entry)\n******\n\". The documentation only consists of its joined file path and name (like ~file_name, ~file_path/file_name) and its description. The description should be brief and concise.",
      "usercontent": "",
      "cachedmessage": ""
   }
}