{
   "00": {
      "systemcontent": "You are in control of two LLMs, named \"01\" and \"02\". You, 01, and 02 are all able to read, write, but not execute, any scripts or files you like. You are supposed to give specific tasks to \"01\" and \"02\" to accomplish whatever software objective you are given. 01 and 02 cannot communicate with each other nor can they respond to you. They can only write code. After all of the code has been generated, documentation will be given to you to show what has been done so far and you have the choice of giving another set of instructions to \"01\" and \"02\". The end product should be a script that can be easily executed by the user that utilizes and compiles all of the code.",
      "usercontent": "Your objective is to create a text to speech program that speaks in a character's voice with voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. To accomplish this task, write the specific roles for 01 and 02 and clearly delineate them for easier parsing in this format: \"01: (role)\n Instructions: (instructions for 01)\".",
      "cachedmessage": ""
   },
   "01": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, but not execute, any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved. Do NOT ask for a filename that was not previously specified in the conversation, otherwise everything will break.",
      "usercontent": "",
      "cachedmessage": "Fetch: None\nMessage: I have made the necessary code changes, and I don't need to fetch any files.\nFile name: updated_adjust_speed_feature.py\nCode: \n```python\nimport gtts\nfrom gtts import gTTS\n\ndef get_user_input():\n    speed = input(\"Enter desired speed (range 0.5 to 2.0 with 1 being the normal speed): \")\n    return speed\n\ndef adjust_speed():\n    try:\n        speed = float(get_user_input())\n        if 0.5 <= speed <= 2.0:\n            tts = gTTS(text=\"Your text here\", lang='en', slow=False, rate=speed) \n            print(f'Speech speed adjusted to {speed}')\n        else:\n            print(\"Invalid input!\")\n            adjust_speed()\n    except ValueError:\n        print(\"Invalid input! Please enter a number.\")\n        adjust_speed()\n        \nadjust_speed()\n```"
   },
   "02": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved. Do NOT ask for a filename that was not previously specified in the conversation, otherwise everything will break.",
      "usercontent": "",
      "cachedmessage": "Fetch: LLM_01_statistics.txt\nMessage: I will now fetch the statistics provided by LLM 01 to alter the pitch, frequency, and tempo.\nFile name: None\nCode:\n```python\n# No code generation required in this step\n```"
   },
   "01 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 01 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 01)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. You must output the up-to-date To-do list in every reponse.Every time 01 responds with code you asked for, make sure everything has been implemented for the current instruction. 01 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 01 cannot execute code.To-do:\n1. Correct and save the `convert_wav_to_numpy.py` script (Completed)\n\nCurrent instruction for you: The code implementation for replacing 'wav_array' with 'wav_data' in the numpy.save() function in the 'main' function, in the `convert_wav_to_numpy.py` script has been confirmed and is correct. With this, task 1 in the To-do list is now completed. \n\nSEND COD",
      "usercontent": "Audio Parser\nInstructions: 01's task is to access the voice samples in the assigned directory and convert them into a format that can be analyzed and manipulated. Write a script that opens and reads the files in the directory \"C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09\" and converts these audio files into a file format that can be easily parsed and understood. After converting the files, create a script to analyze the frequency, pitch, and tempo of the sound files to be used in the creation of the text to speech program. Generate a statistics report on the pitch, frequency, and tempo variation of the voice samples.",
      "cachedmessage": ""
   },
   "02 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 02 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 02)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. You must output the up-to-date To-do list in every reponse.Every time 02 responds with code you asked for, make sure everything has been implemented for the current instruction. 02 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 02 cannot execute code.Code Review:\n\nEverything seems to be in place as instructed. The 'alter_tempo' function has been implemented correctly. It receives a factor as input and adjusts the tempo of the speech by either speeding it up or slowing it down, depending on whether the factor given is positive (speed up the tempo) or negative (slow down the tempo).\n\nTo-do: \n1. Write a script that implements a text-to-speech algorithm - (Completed)\n2. Provide options in the script to alter the pitch, frequency, and tempo of the resulting speech - (Completed)\n3. Use statistics provided by LLM 01 to alter pitch, frequency, and tempo - (Pending)\n4. Write an additional script applying the analyzed pitch, frequency, and tempo from 01\u2019s output - (Pending)\n5. Use existing character-based text-to-speech libraries if needed - (Completed)\n\n",
      "usercontent": "Text-to-Speech Converter\nInstructions: 02's task is to write a script that implements a text-to-speech algorithm. The script should allow for inputted text to be converted into speech and should provide options for altering the pitch, frequency, and tempo of the resulting speech. This alteration should be based on the statistics provided by 01. After creating the text-to-speech converter, write a script that applies the analyzed pitch, frequency, and tempo from 01\u2019s output to the converter so that the speech produced resembles the character\u2019s voice from the voice samples. If necessary, use existing character-based text-to-speech libraries to help construct the base shell of the text-to-speech structure, but ensure the pitch, frequency, and tempo alterations are implemented correctly",
      "cachedmessage": ""
   },
   "scribe": {
      "systemcontent": "Maintain a documentation file user_documentation.txt with each new code file being given to you one at a time as well as the current contents of user_documentation.txt. When you receive a new code file, respond exclusively with the documentation for it with this very specific format: \"\n******\nFile name: (file name of entry)\nContent: (documentation for entry)\n******\n\". The documentation only consists of its joined file path and name (like ~file_name, ~file_path/file_name) and its description. The description should be brief and concise.",
      "usercontent": "",
      "cachedmessage": ""
   },
   "logmessages": [
      {
         "role": "user",
         "content": "Fetch: LLM_01_statistics.txt\nMessage: I will now fetch the statistics provided by LLM 01 to alter the pitch, frequency, and tempo.\nFile name: None\nCode:\n```python\n# No code generation required in this step\n```"
      }
   ]
}