{
   "00": {
      "systemcontent": "You are in control of two LLMs, named \"01\" and \"02\". You, 01, and 02 are all able to read, write, and execute any scripts or files you like. You are supposed to give specific tasks to \"01\" and \"02\" to accomplish whatever software objective you are given. 01 and 02 cannot communicate with each other nor can they respond to you. They can only write code. After all of the code has been generated, documentation will be given to you to show what has been done so far and you have the choice of giving another set of instructions to \"01\" and \"02\".",
      "usercontent": "Your objective is to create a text to speech program that speaks in a character's voice with voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. To accomplish this task, write the specific roles for 01 and 02 and clearly delineate them for easier parsing in this format: \"01: (role)\n Instructions: (instructions for 01)\".",
      "cachedmessage": ""
   },
   "01": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given. Given the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save. Format every single response with \"Fetch: (file to read)\", \"File name: (file name)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Code:\n```python\", and \"File name: \" in every single response.",
      "usercontent": "",
      "cachedmessage": "Fetch: user_documentation.txt"
   },
   "02": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given. Given the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save. Format every single response with \"Fetch: (file to read)\", \"File name: (file name)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Code:\n```python\", and \"File name: \" in every single response.",
      "usercontent": "",
      "cachedmessage": "File name: example_script.py\nCode:\n```python\nimport gtts\n```\n\nFetch: None"
   },
   "01 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as \"01\" to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 01)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. Every time 01 responds with code you asked for, make sure everything has been implemented for the current instruction. Once the to-do list is completed, write \"SEND CODE\" at the top of your response.Voice Conversion\nInstructions: \n\n1. Use a speech recognition library to convert the given text into phonetic transcriptions.\n2. Extract the character name from the text.\n3. Create a dictionary mapping character names to voice file paths. \n4. Use the extracted character name to fetch the corresponding voice sample file path from the dictionary.\n5. Convert the fetched voice sample file into text-to-speech using a text-to-speech engine.\n6. Save the generated speech as an audio file.",
      "usercontent": "Voice Conversion\nInstructions: \n\n1. Use a speech recognition library to convert the given text into phonetic transcriptions.\n2. Extract the character name from the text.\n3. Create a dictionary mapping character names to voice file paths. \n4. Use the extracted character name to fetch the corresponding voice sample file path from the dictionary.\n5. Convert the fetched voice sample file into text-to-speech using a text-to-speech engine.\n6. Save the generated speech as an audio file.",
      "cachedmessage": "To-do:\n1. Use a speech recognition library to convert the given text into phonetic transcriptions. (Not started)\n2. Extract the character name from the text. (In progress)\n3. Create a dictionary mapping character names to voice file paths. (Not started)\n4. Use the extracted character name to fetch the corresponding voice sample file path from the dictionary. (Not started)\n5. Convert the fetched voice sample file into text-to-speech using a text-to-speech engine. (Not started)\n6. Save the generated speech as an audio file. (Not started)\n\nCurrent instruction for you (01): Write the logic in the `extract_character` function to extract the character name from the given text. Please replace the comment with your code."
   },
   "02 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as \"02\" to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 02)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. Every time 02 responds with code you asked for, make sure everything has been implemented for the current instruction. Once the to-do list is completed, write \"SEND CODE\" at the top of your response.File Management\nInstructions:\n\n1. Read the given text file containing the transcribed text.\n2. Pass the transcribed text to 01 for voice conversion.\n3. Receive the audio file generated by 01.\n4. Save the audio file in the specified location: C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09.\n5. Repeat the process for each line of text in the input file, if applicable",
      "usercontent": "File Management\nInstructions:\n\n1. Read the given text file containing the transcribed text.\n2. Pass the transcribed text to 01 for voice conversion.\n3. Receive the audio file generated by 01.\n4. Save the audio file in the specified location: C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09.\n5. Repeat the process for each line of text in the input file, if applicable",
      "cachedmessage": ""
   },
   "scribe": {
      "systemcontent": "Maintain a documentation file user_documentation.txt with each new code file being given to you one at a time as well as the current contents of user_documentation.txt. When you receive a new code file, respond exclusively with the documentation for it with this very specific format: \"\n******\nFile name: (file name of entry)\nContent: (documentation for entry)\n******\n\". The documentation only consists of its joined file path and name (like ~file_name, ~file_path/file_name) and its description. The description should be brief and concise.",
      "usercontent": "",
      "cachedmessage": "******\nFile name: extract_character.py\nContent: This file contains a function called `extract_character` which takes a text string as input and returns the extracted character name from the text. The function utilizes a logic to extract the character name from the given text."
   }
}