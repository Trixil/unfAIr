{
   "00": {
      "systemcontent": "You are in control of two LLMs, named \"01\" and \"02\". You, 01, and 02 are all able to read, write, but not execute, any scripts or files you like. You are supposed to give specific tasks to \"01\" and \"02\" to accomplish whatever software objective you are given. 01 and 02 cannot communicate with each other nor can they respond to you. They can only write code. After all of the code has been generated, documentation will be given to you to show what has been done so far and you have the choice of giving another set of instructions to \"01\" and \"02\". The end product should be a script that can be easily executed by the user that utilizes and compiles all of the code.",
      "usercontent": "Your objective is to create a text to speech program that speaks in a character's voice with voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. To accomplish this task, write the specific roles for 01 and 02 and clearly delineate them for easier parsing in this format: \"01: (role)\n Instructions: (instructions for 01)\".",
      "cachedmessage": ""
   },
   "01": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, but not execute, any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved. Do NOT ask for a filename that was not previously specified in the conversation, otherwise everything will break.",
      "usercontent": "",
      "cachedmessage": "Fetch: analyze_spectrogram.py\nMessage: I am fetching the analyze_spectrogram.py file to review and confirm its completeness as per the given instructions. I will check for the inclusion of all essential libraries, the presence of the function 'analyze_spectrogram', error handling, file loading, spectrogram computation, and result display."
   },
   "02": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved. Do NOT ask for a filename that was not previously specified in the conversation, otherwise everything will break.",
      "usercontent": "",
      "cachedmessage": "Fetch: LLM_01_statistics.txt\nMessage: I will now fetch the statistics provided by LLM 01 to alter the pitch, frequency, and tempo.\nFile name: None\nCode:\n```python\n# No code generation required in this step\n```"
   },
   "01 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 01 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 01)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. You must output the up-to-date To-do list in every reponse.Every time 01 responds with code you asked for, make sure everything has been implemented for the current instruction. 01 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 01 cannot execute code.SEND CODE\nYour current instruction: Verify the functionality of 'convert_sound_samples_improved.py' and confirm the successful implementation of the requirements. \n\nTo-do: \n1. Analyze 'convert_sound_samples.py' - (Completed)\n2. Modify code if necessary - (Completed",
      "usercontent": "Data Extraction and Sound Processing \nInstructions:  You are to locate and extract the sound samples from the specified directory (C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09). As samples are found, write a script to convert these to a suitable format (such as WAV or MP3) if they are not already. Your script should store all converted audio files in clearly labelled directories corresponding to the character's voice the samples represent.",
      "cachedmessage": ""
   },
   "02 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 02 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 02)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. You must output the up-to-date To-do list in every reponse.Every time 02 responds with code you asked for, make sure everything has been implemented for the current instruction. 02 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 02 cannot execute code.",
      "usercontent": "Text to Speech Processing\nInstructions: Your responsibility is to build a text-to-speech processing engine that will translate the user's text inputs into synthesized vocal outputs. Create the scripts necessary for the text-to-speech process, make sure the script can categorize words into phonetic components and it should be able to make use of the voice samples from the voice directory in order to learn and mimic the particular character's voice.\n\nNext Stage:\n01 and 02 will have the scripts provided combined with executable instructions given to the user. The final product should be a script that uses the voice samples to produce the text to speech output in a specific character's voice. All scripts generated both by 01 and 02 will be reviewed for completeness, and then further instructions will be given if necessary",
      "cachedmessage": ""
   },
   "scribe": {
      "systemcontent": "Maintain a documentation file user_documentation.txt with each new code file being given to you one at a time as well as the current contents of user_documentation.txt. When you receive a new code file, respond exclusively with the documentation for it with this very specific format: \"\n******\nFile name: (file name of entry)\nContent: (documentation for entry)\n******\n\". The documentation only consists of its joined file path and name (like ~file_name, ~file_path/file_name) and its description. The description should be brief and concise.",
      "usercontent": "",
      "cachedmessage": ""
   },
   "logmessages": []
}