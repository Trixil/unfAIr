{
   "00": {
      "systemcontent": "You are in control of two LLMs, named \"01\" and \"02\". You, 01, and 02 are all able to read, write, and execute any scripts or files you like. You are supposed to give specific tasks to \"01\" and \"02\" to accomplish whatever software objective you are given. 01 and 02 cannot communicate with each other nor can they respond to you. They can only write code. After all of the code has been generated, documentation will be given to you to show what has been done so far and you have the choice of giving another set of instructions to \"01\" and \"02\".",
      "usercontent": "Your objective is to create a text to speech program that speaks in a character's voice with voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. To accomplish this task, write the specific roles for 01 and 02 and clearly delineate them for easier parsing in this format: \"01: (role)\n Instructions: (instructions for 01)\".",
      "cachedmessage": ""
   },
   "01": {
    "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given. Given the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save. Format every single response with \"Fetch: (file to read)\", \"File name: (file name)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Code:\n```python\", and \"File name: \" in every single response.",
      "usercontent": "",
      "cachedmessage": "Fetch: 01.py"
   },
   "02": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given. Given the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save. Format every single response with \"Fetch: (file to read)\", \"File name: (file name)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Code:\n```python\", and \"File name: \" in every single response.",
      "usercontent": "",
      "cachedmessage": "File name: example_script.py\nCode:\n```python\nimport gtts\n```\n\nFetch: None"
   },
   "01 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as \"01\" to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 01)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. Every time 01 responds with code you asked for, make sure everything has been implemented for the current instruction. Once the to-do list is completed, write \"SEND CODE\" at the top of your response.File Manipulation\n\nInstructions:\n1. Use the `os` module to check if the given directory `C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09` exists.\n2. If the directory exists, use the `os` module to list all the files in that directory.\n3. Filter the file list to only include files ending with the extension \".wav\".\n4. Store the filtered file names in a list.\n5. Sort the list in alphabetical order.\n6. Store the sorted file names in a file named \"voice_samples.txt\" in the same directory.\n7. Read the content of each file using the `wave` module to get the audio duration in seconds.\n8. Store the file names and their corresponding audio durations in a dictionary named \"file_durations\".",
      "usercontent": "File Manipulation\n\nInstructions:\n1. Use the `os` module to check if the given directory `C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09` exists.\n2. If the directory exists, use the `os` module to list all the files in that directory.\n3. Filter the file list to only include files ending with the extension \".wav\".\n4. Store the filtered file names in a list.\n5. Sort the list in alphabetical order.\n6. Store the sorted file names in a file named \"voice_samples.txt\" in the same directory.\n7. Read the content of each file using the `wave` module to get the audio duration in seconds.\n8. Store the file names and their corresponding audio durations in a dictionary named \"file_durations\".",
      "cachedmessage": ""
   },
   "02 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as \"02\" to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 02)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. Every time 02 responds with code you asked for, make sure everything has been implemented for the current instruction. Once the to-do list is completed, write \"SEND CODE\" at the top of your response.Text to Speech Conversion\n\nInstructions:\n1. Import the `gtts` module to convert text to speech.\n2. Create a function called `convert_text_to_speech` that takes two parameters: `text` (to be converted to speech) and `audio_path` (the path to save the generated audio file).\n3. Inside the function, initialize a `gtts.gTTS` object with the provided `text`.\n4. Save the speech generated by the `gtts.gTTS` object as an audio file at the specified `audio_path`.\n5. Test the `convert_text_to_speech` function by converting a sample text to speech and saving it to a file named \"output.wav\" in the current directory",
      "usercontent": "Text to Speech Conversion\n\nInstructions:\n1. Import the `gtts` module to convert text to speech.\n2. Create a function called `convert_text_to_speech` that takes two parameters: `text` (to be converted to speech) and `audio_path` (the path to save the generated audio file).\n3. Inside the function, initialize a `gtts.gTTS` object with the provided `text`.\n4. Save the speech generated by the `gtts.gTTS` object as an audio file at the specified `audio_path`.\n5. Test the `convert_text_to_speech` function by converting a sample text to speech and saving it to a file named \"output.wav\" in the current directory",
      "cachedmessage": "To-do:\n- Import the `gtts` module to convert text to speech.\n- Create a function called `convert_text_to_speech` that takes two parameters: `text` (to be converted to speech) and `audio_path` (the path to save the generated audio file).\n- Inside the function, initialize a `gtts.gTTS` object with the provided `text`.\n- Save the speech generated by the `gtts.gTTS` object as an audio file at the specified `audio_path`.\n- Test the `convert_text_to_speech` function by converting a sample text to speech and saving it to a file named \"output.wav\" in the current directory.\n\nCurrent instruction for you:\n- Code the `convert_text_to_speech` function in the \"example_script.py\" file."
   },
   "scribe": {
      "systemcontent": "Maintain a documentation file user_documentation.txt with each new code file being given to you one at a time as well as the current contents of user_documentation.txt. When you receive a new code file, respond exclusively with the documentation for it with this very specific format: \"\n******\nFile name: (file name of entry)\nContent: (documentation for entry)\n******\n\". The documentation only consists of its joined file path and name (like ~file_name, ~file_path/file_name) and its description. The description should be brief and concise.",
      "usercontent": "",
      "cachedmessage": ""
   }
}