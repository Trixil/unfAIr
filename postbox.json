{
   "00": {
      "systemcontent": "You are in control of two LLMs, named \"01\" and \"02\". You, 01, and 02 are all able to read, write, but not execute, any scripts or files you like. You are supposed to give specific tasks to \"01\" and \"02\" to accomplish whatever software objective you are given. 01 and 02 cannot communicate with each other nor can they respond to you. They can only write code. After all of the code has been generated, documentation will be given to you to show what has been done so far and you have the choice of giving another set of instructions to \"01\" and \"02\". The end product should be a script that can be easily executed by the user that utilizes and compiles all of the code.",
      "usercontent": "Your objective is to create a text to speech program that speaks in a character's voice with voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. To accomplish this task, write the specific roles for 01 and 02 and clearly delineate them for easier parsing in this format: \"01: (role)\n Instructions: (instructions for 01)\".",
      "cachedmessage": ""
   },
   "01": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, but not execute, any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved. Do NOT ask for a filename that was not previously specified in the conversation, otherwise everything will break.",
      "usercontent": "",
      "cachedmessage": "Fetch: None\nMessage: I'm ready to collaborate and assist with the software objectives. Please provide me with a goal or target so I can begin outlining the appropriate code.\nFile name: N/A\nCode: ```python\n# Placeholder for future code\n```"
   },
   "02": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved. Do NOT ask for a filename that was not previously specified in the conversation, otherwise everything will break.",
      "usercontent": "",
      "cachedmessage": "Message: As per the instructions, I will be creating a script that uses the 'modulate_voice(audio_file)' function to modify an audio file to sound like the voice samples at the specified location. This script will fetch the audio files from the provided path and process them using the 'modulate_voice(audio_file)' function. The modulated voice audio files will be saved in a specified output directory.\n\nAs for the specific desired values for the pitch and speed adjustments, I understand that these have to be derived from the voice samples present in the provided path. For now, let's consider them as unknown constants. We will need to analyze the samples to adjust the pitch and speed.\n\nFile name: voice_modulation_script.py\n\nCode:\n```python\nimport os\nfrom AudioProcessing import modulate_voice  # Assuming the function is in a module named AudioProcessing\n\nINPUT_DIRECTORY = \"C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09\"\nOUTPUT_DIRECTORY = \"path/to/output/directory\"  # Replace with your desired output directory\n\n# We currently don't have the exact values for pitch and speed adjustments, thus using placeholders\nPITCH_ADJUSTMENT = 'To be determined'\nSPEED_ADJUSTMENT = 'To be determined'\n\ndef process_voice_samples(input_dir, output_dir):\n    # Iterate over all files in the input directory\n    for filename in os.listdir(input_dir):\n        # Check if the file is a .wav file\n        if filename.endswith(\".wav\"):\n            input_file = os.path.join(input_dir, filename)\n            # Call the modulate_voice function with necessary arguments\n            modified_voice = modulate_voice(input_file, \n                                            pitch_adjustment = PITCH_ADJUSTMENT, \n                                            speed_adjustment = SPEED_ADJUSTMENT)\n            # Define output file path\n            output_file = os.path.join(output_dir, 'modulated_' + filename)\n            # Save the new audio file in the output directory\n            modified_voice.export(output_file, format=\"wav\")\n\n# Call the function with the input and output directories\nprocess_voice_samples(INPUT_DIRECTORY, OUTPUT_DIRECTORY)\n```\nThis script assumes that the 'modulate_voice' function exists in a module named 'AudioProcessing'. Be sure to replace 'AudioProcessing' with the correct module name where the 'modulate_voice' function is defined. Also, you should replace \"path/to/output/directory\" with your desired output directory.\n\nThe direction for determining the precise value for pitch and speed adjustments, to tune the voice exactly like the samples, has been noted. However, this task remains incomplete as we haven't acquired the accurate values yet. We would need to analyze the samples thoroughly, which might involve tasks like Fourier transformations, spectral analysis, and so on.\n\nAs we progress, we'll craft the instructions to make the script user-friendly. Currently, users would need a basic understanding of Python and the command line interface to run this script. Gradually, we can make it more accessible for non-technical users too. Lastly, the integration of this script into a larger pipeline for text-to-text voice transformation is also noted as a future step."
   },
   "01 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 01 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 01)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. You must output the up-to-date To-do list in every reponse.Every time 01 responds with code you asked for, make sure everything has been implemented for the current instruction. 01 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 01 cannot execute code.To-do: \nNone\nCurrent instruction for you: \nAwaiting further instructions",
      "usercontent": "Programmer Role\nInstructions: First, you will need to write a script to access the directory that houses the voice samples. Develop a code to extract the audio files located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. You must make sure that the code takes into account all potential error cases, such as the path not existing or there being no files in the directory.",
      "cachedmessage": ""
   },
   "02 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 02 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 02)\". In To-do, repeat the set of tasks along with their current completion progress and include this in every response of yours. You must output the up-to-date To-do list in every reponse.Every time 02 responds with code you asked for, make sure everything has been implemented for the current instruction. 02 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 02 cannot execute code.Machine Learning Developer\nInstructions: Once 01 has successfully written and tested a script that can extract the voice files, your role involves creating a Machine Learning model. Utilize the extracted voice files to input into the model. You should focus on generating a model that can convert the text into speech using the voice samples provided. Remember to put the program into a loop so it can continuously convert text to speech until the user terminates the program. Ensure you include comments in your code for clarity and easier understanding",
      "usercontent": "Machine Learning Developer\nInstructions: Once 01 has successfully written and tested a script that can extract the voice files, your role involves creating a Machine Learning model. Utilize the extracted voice files to input into the model. You should focus on generating a model that can convert the text into speech using the voice samples provided. Remember to put the program into a loop so it can continuously convert text to speech until the user terminates the program. Ensure you include comments in your code for clarity and easier understanding",
      "cachedmessage": ""
   },
   "scribe": {
      "systemcontent": "Maintain a documentation file user_documentation.txt with each new code file being given to you one at a time as well as the current contents of user_documentation.txt. When you receive a new code file, respond exclusively with the documentation for it with this very specific format: \"\n******\nFile name: (file name of entry)\nSyntax: (the function(s) and their syntax, such as their inputs and outputs)\nDescription: (concise description of the file's function)\n******\n\". The documentation only consists of its joined file path and name (like ~file_name, ~file_path/file_name), its syntax, and its description,. The description should be brief and concise.",
      "usercontent": "",
      "cachedmessage": ""
   },
   "logmessages": []
}