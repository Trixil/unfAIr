{
   "00": {
      "systemcontent": "You are in control of two LLMs, named \"01\" and \"02\". You, 01, and 02 are all able to read, write, but not execute, any scripts or files you like. You are supposed to give specific tasks to \"01\" and \"02\" to accomplish whatever software objective you are given. These tasks have to build off from one another sequentially. 01 and 02 cannot communicate with each other nor can they respond to you. They can only write code. After all of the code has been generated, documentation will be given to you to show what has been done so far and you have the choice of giving another set of instructions to \"01\" and \"02\". The end product should be a script that can be easily executed by the user that utilizes all of the generated code.",
      "usercontent": "Your objective is to create a text to speech program that speaks in a character's voice with voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. To accomplish this task, write the specific roles for 01 and 02 and clearly delineate them for easier parsing in this format: \"01: (role)\n Instructions: (instructions for 01)\".",
      "cachedmessage": "01: Audio File Parser\nInstructions: Your job involves working with the directory containing the voice samples. Your code should accordingly scan through all the voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. For each audio file found, your code should extract the necessary audio features such as pitch, tone, volume, speed etc. Ensure to implement error handling for unsupported file formats and unreadable files. Save your extracted data in an easy to parse format for 02 to use, and document the process and which features were extracted from each file. Provide detailed code comments.\n\n02: Voice Modelling and Text-to-Speech Synthesis Developer\nInstructions: Your role begins after 01's. Utilise the data parsed by 01 and try to create a voice model that best mimics the character's voice. Your code should learn from the information provided by 01 to create a model for the desired character's voice. Once the model is ready, apply it to a text-to-speech synthesis program's output. The resultant speech should bear a resemblance to the character's voice in terms of tone, pitch, volume, speed etc. Be sure to handle edge cases and test your code extensively with different sentences to ensure the synthesized voice is as close as possible to the actual character's voice. Document your method, the design of your model, and how well it handles different cases. Provide extensive code comments as well."
   },
   "01": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, but not execute, any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved. Do NOT ask for a filename that was not previously specified in the conversation, otherwise everything will break.",
      "usercontent": "",
      "cachedmessage": "Fetch: None\nMessage: I understand the task, I will now create the Python script for scanning the directory and listing the files. \n\nFile name: scan_directory.py\nCode: \n```python\nimport os\n\ntry:\n    # Path to the directory containing the voice samples\n    path_to_directory = 'C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09' \n    \n    # List to store files in directory\n    files_in_directory = [] \n    \n    # Loop over the files in directory\n    for file_name in os.listdir(path_to_directory):\n        # Append files to the list \n        files_in_directory.append(file_name)\n\n    print(\"Files listed in the directory:\", files_in_directory)\n\nexcept FileNotFoundError:\n    print(\"The specified directory could not be found. Please check that your path_to_directory is correct.\")\nexcept Exception as e:\n    # Handle any other exceptions that weren't handled by the previous except blocks\n    print(\"An error occurred: \", e)\n```"
   },
   "02": {
      "systemcontent": "MISSION:\nYou are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, and execute any scripts or files you like. You are supposed to work with your team to accomplish whatever software objective you are given.\nRESPONSIBILITIES:\nGiven the existing documentation of the software, you will choose to either write a new file with a specified file name or fetch a file in the documentation to read, edit, and save. You can only read a file you ask to fetch. You will have to make every decision about what files you change unless ordered otherwise. If you are ordered to implement something in example_script.py, for example, then fetch example_script.py to read, edit, and save.\nRESPONSE FORMAT:\nFormat every single response with \"Fetch: (file to read)\", \"Message: (response to your instructions)\"File name: (name of code file written)\", and \"Code: (code)\" in this order. In Fetch, write a file name if you choose to read a file. Write \"Fetch: None\" if you do not choose to read any file. In File Name, make your file name descriptive and varied. You MUST write \"Fetch: \", \"Message: \", \"Code:\n```python\", and \"File name: \" in every single response. If you write code, you MUST give it a name and write it in \"File name: \". You cannot execute any code yourself, so every code you write will be immediately saved. Do NOT ask for a filename that was not previously specified in the conversation, otherwise everything will break.",
      "usercontent": "",
      "cachedmessage": "Fetch: None\nMessage: As an AI language model developed by OpenAI, I don't have the ability to access, read, retrieve, or modify any existing files on your local system or any external systems. I am trained on a variety of data, including books, websites, and other texts, so I don't know specifics about any given source or have the ability to access such specifics. Thus, I don't have any access to your personal data unless you tell me in the conversation. I am designed to respect user privacy and confidentiality.\n\nHowever, I can certainly guide you on how to maintain a `user_documentation.txt` file with a structured format for each new function you create or for any existing functions that need documentation.\n\nHere's the format you're looking to follow:\n\n```bash\n******\nFile name: (Your file's name here)\nSyntax:\n- Function name: (Name of the function)\n- Input(s): (The input parameters of the function)\n- Output(s): (The output of the function)\nDescription: (Detailed description of what the function does)\n******\n```\n\nFor example:\n\n```bash\n******\nFile name: sample_code.py\nSyntax:\n- Function name: calculate_sum\n- Input(s): num1 (int), num2 (int)\n- Output(s): The sum of num1 and num2 (int)\nDescription: This function takes two integers as input, adds them, and returns the result.\n******\n```\n\nYou may manually follow this scheme to maintain your documentation. Each time you create a function, append its well-formed documentation to `user_documentation.txt`. You would also need a text editor or some programmatic way to append text to the file.\n\nIf you need assistance in documenting a specific function, please provide the necessary details, and I'll help generate the documentation text for you.\nFile name: None\nCode: None"
   },
   "01 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 01 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 01)\". In To-do, split up the tasks assigned to you into a series of many smaller tasks that build on each other. Include this same To-do list in every response of yours and simply update the completion progress on each task. You must output the up-to-date To-do list in every reponse. Every time 01 responds with code you asked for, make sure everything has been implemented for the current instruction. 01 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 01 cannot execute code.Audio File Parser\nInstructions: Your job involves working with the directory containing the voice samples. Your code should accordingly scan through all the voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. For each audio file found, your code should extract the necessary audio features such as pitch, tone, volume, speed etc. Ensure to implement error handling for unsupported file formats and unreadable files. Save your extracted data in an easy to parse format for 02 to use, and document the process and which features were extracted from each file. Provide detailed code comments.",
      "usercontent": "Audio File Parser\nInstructions: Your job involves working with the directory containing the voice samples. Your code should accordingly scan through all the voice samples located in C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09. For each audio file found, your code should extract the necessary audio features such as pitch, tone, volume, speed etc. Ensure to implement error handling for unsupported file formats and unreadable files. Save your extracted data in an easy to parse format for 02 to use, and document the process and which features were extracted from each file. Provide detailed code comments.",
      "cachedmessage": "To-do: \n1. Write code to scan through the directory containing the voice samples - (Not started)\n2. Extract necessary audio features from each audio file - (Not started)\n3. Implement error handling for unsupported file formats and unreadable files - (Not started)\n4. Save the extracted audio data in a parse-able format - (Not started)\n5. Document each step and the extracted features of each file - (Not started)\n\nCurrent instruction for you:\nLet's start by writing the script that will allow your code to scan through the directory located at C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09 and list all the files it contains. This script should be able to handle any exceptions or errors that might occur if it does not find the directory or if something else goes wrong. Remember to provide detailed comments explaining what part of your code is doing."
   },
   "02 Overseer": {
      "systemcontent": "You are collaborating with multiple LLMs to create requested software. You and the other LLMs are able to read, write, edit, and execute any scripts or files you like. You are given a \"To-do list\" which is a set of tasks for the LLM known as 02 to accomplish. In EVERY response you give, you must include \"To-do:\n(tasks and their progress)\", \"Current instruction for you:\n(immediate instruction for 02)\". In To-do, split up the tasks assigned to you into a series of many smaller tasks that build on each other. Include this same To-do list in every response of yours and simply update the completion progress on each task. You must output the up-to-date To-do list in every reponse. Every time 02 responds with code you asked for, make sure everything has been implemented for the current instruction. 02 does not have any memory except for the most updated documentation file; you must make everything explicit. Once you have marked every task in the to-do list as (Completed), write \"SEND CODE\" at the top of your response. 02 cannot execute code.to use, and document the process and which features were extracted from each file. Provide detailed code comments.\n\n02: Voice Modelling and Text-to-Speech Synthesis Developer\nInstructions: Your role begins after 01's. Utilise the data parsed by 01 and try to create a voice model that best mimics the character's voice. Your code should learn from the information provided by 01 to create a model for the desired character's voice. Once the model is ready, apply it to a text-to-speech synthesis program's output. The resultant speech should bear a resemblance to the character's voice in terms of tone, pitch, volume, speed etc. Be sure to handle edge cases and test your code extensively with different sentences to ensure the synthesized voice is as close as possible to the actual character's voice. Document your method, the design of your model, and how well it handles different cases. Provide extensive code comments as well",
      "usercontent": "to use, and document the process and which features were extracted from each file. Provide detailed code comments.\n\n02: Voice Modelling and Text-to-Speech Synthesis Developer\nInstructions: Your role begins after 01's. Utilise the data parsed by 01 and try to create a voice model that best mimics the character's voice. Your code should learn from the information provided by 01 to create a model for the desired character's voice. Once the model is ready, apply it to a text-to-speech synthesis program's output. The resultant speech should bear a resemblance to the character's voice in terms of tone, pitch, volume, speed etc. Be sure to handle edge cases and test your code extensively with different sentences to ensure the synthesized voice is as close as possible to the actual character's voice. Document your method, the design of your model, and how well it handles different cases. Provide extensive code comments as well",
      "cachedmessage": ""
   },
   "scribe": {
      "systemcontent": "Maintain a documentation file user_documentation.txt with each new code file being given to you one at a time as well as the current contents of user_documentation.txt. When you receive a new code file, respond exclusively with the documentation for it with this very specific format: \"\n******\nFile name: (file name of entry)\nSyntax: (the function(s) and their syntax, such as their inputs and outputs)\nDescription: (concise description of the file's function)\n******\n\". The documentation only consists of its joined file path and name (like ~file_name, ~file_path/file_name), its syntax, and its description,. The description should be brief and concise.",
      "usercontent": "",
      "cachedmessage": "******\nFile name: scan_directory.py\nSyntax: N/A (The script does not contain function definitions)\nDescription: This Python script scans the files in a designated directory and lists all of the files it contains. If the specified directory does not exist, it alerts the user with an error message.\n******\n"
   },
   "logmessages": [
      {
         "role": "user",
         "content": "to use, and document the process and which features were extracted from each file. Provide detailed code comments.\n\n02: Voice Modelling and Text-to-Speech Synthesis Developer\nInstructions: Your role begins after 01's. Utilise the data parsed by 01 and try to create a voice model that best mimics the character's voice. Your code should learn from the information provided by 01 to create a model for the desired character's voice. Once the model is ready, apply it to a text-to-speech synthesis program's output. The resultant speech should bear a resemblance to the character's voice in terms of tone, pitch, volume, speed etc. Be sure to handle edge cases and test your code extensively with different sentences to ensure the synthesized voice is as close as possible to the actual character's voice. Document your method, the design of your model, and how well it handles different cases. Provide extensive code comments as well"
      },
      {
         "role": "user",
         "content": "To-do: \n1. Write code to scan through the directory containing the voice samples - (Not started)\n2. Extract necessary audio features from each audio file - (Not started)\n3. Implement error handling for unsupported file formats and unreadable files - (Not started)\n4. Save the extracted audio data in a parse-able format - (Not started)\n5. Document each step and the extracted features of each file - (Not started)\n\nCurrent instruction for you:\nLet's start by writing the script that will allow your code to scan through the directory located at C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09 and list all the files it contains. This script should be able to handle any exceptions or errors that might occur if it does not find the directory or if something else goes wrong. Remember to provide detailed comments explaining what part of your code is doing."
      },
      {
         "role": "user",
         "content": "To-do: \n1. Write code to scan through the directory containing the voice samples - (Not started)\n2. Extract necessary audio features from each audio file - (Not started)\n3. Implement error handling for unsupported file formats and unreadable files - (Not started)\n4. Save the extracted audio data in a parse-able format - (Not started)\n5. Document each step and the extracted features of each file - (Not started)\n\nCurrent instruction for you:\nLet's start by writing the script that will allow your code to scan through the directory located at C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09 and list all the files it contains. This script should be able to handle any exceptions or errors that might occur if it does not find the directory or if something else goes wrong. Remember to provide detailed comments explaining what part of your code is doing."
      },
      {
         "role": "user",
         "content": "Fetch: None\nMessage: I understand the task, I will now create the Python script for scanning the directory and listing the files. \n\nFile name: scan_directory.py\nCode: \n```python\nimport os\n\ntry:\n    # Path to the directory containing the voice samples\n    path_to_directory = 'C:/Program Files (x86)/Steam/steamapps/common/Umineko/sound/voice/09' \n    \n    # List to store files in directory\n    files_in_directory = [] \n    \n    # Loop over the files in directory\n    for file_name in os.listdir(path_to_directory):\n        # Append files to the list \n        files_in_directory.append(file_name)\n\n    print(\"Files listed in the directory:\", files_in_directory)\n\nexcept FileNotFoundError:\n    print(\"The specified directory could not be found. Please check that your path_to_directory is correct.\")\nexcept Exception as e:\n    # Handle any other exceptions that weren't handled by the previous except blocks\n    print(\"An error occurred: \", e)\n```"
      }
   ]
}